import { Page, Logger } from "playwright";
import { type AnonApi } from "@anon/fern-sdk";
export type AppIntegration = AnonApi.Integration;
/**
 * Custom proxy configuration. If omitted, Anon's proxies are used. If set to
 * `false`, proxying is disabled.
 */
type ProxyConfig = {
    /** Address of the proxy server */
    server: string;
    /** Address of the proxy server */
    username: string;
    /** Proxy login password */
    password: string;
};
type BrowserInputBase<T> = {
    /** ID of the app user whose account to use */
    appUserId: string;
    /** List of apps to inject sessions for. Set to "all" to inject all connected sessions. */
    apps: AnonApi.Apps;
    /** Action to perform on the `page`. Navigate to the correct page using `page.goto`
        before interacting with the page. */
    action: (page: Page) => Promise<T>;
    /** Total lifetime of the session in seconds. Defaults to 900 (15 minutes). */
    sessionDuration?: Number;
};
type BrowserInputManaged = {
    /** Set to `managed` to use a managed Playwright instance. */
    hosting?: "managed";
    /** Proxy configuration */
    proxy?: ProxyConfig;
    /** Log sink for fine-grained logging control */
    logger?: Logger;
};
type BrowserInputRemote = {
    /** CDP URL of an existing Playwright instance */
    cdpUrl: string;
};
type BrowserInput<T> = BrowserInputBase<T> & (BrowserInputManaged | BrowserInputRemote);
export type Environment = "local" | "staging" | "sandbox" | "prod";
export declare class AnonRuntime {
    private apiKey;
    private environment;
    private client;
    constructor({ apiKey, environment, }: {
        apiKey: string;
        environment?: Environment;
    });
    /**
     * Run an `action` for a given user with `appUserId` connected to
     * `apps`. Returns a `liveStreamingUrl` where the action can be observed
     * while in progress, and a `result` that is returned by the given
     * `action`. You must navigate to the page on which you'd like to to perform
     * the action using `page.goto`.
     *
     * See the {@link https://docs.anon.com/reference/sdk/sdk-typescript-ref|docs} for more examples.
     *
     * @example
     * const anon = new AnonRuntime({ apiKey: "your api key here" });
     *
     * // The username of the user whose account to use
     * const appUserId = "myProduct-user";
     * // The app sessions to inject
     * const apps = ["linkedin"];
     * // The action to be performed
     * const action = async (page) => {
     *   await page.goto("https://linkedin.com");
     *   await LinkedIn.createPost(page, {
     *     title: "I love Anon",
     *     content: "They make automating actions so easy! Check out docs.anon.com to learn more."
     *   });
     * }
     *
     * const { result, liveStreamingUrl } = await anon.run({
     *   appUserId,
     *   apps: ["linkedin"],
     *   action
     * });
     *
     * // You can use the liveStreamingUrl to watch your action be performed.
     *
     * // Await the successful completion of the action
     * await result;
     */
    run<T>(input: BrowserInput<T>): Promise<{
        /** Returned result of your action. Resolves (or rejects) when the action is completed. */
        result: Promise<T>;
        /** URL where you can see a rendered view of the browser. Only for managed browser instances. */
        liveStreamingUrl?: string;
    }>;
    /** List all linked sessions for the app user with given `appUserId` */
    listSessions({ appUserId }: {
        appUserId: string;
    }): Promise<AnonApi.ListSessionsResponse>;
    /** Get the session status for an app user and app integration. */
    getSessionStatus({ appUserId, app, }: {
        appUserId: string;
        app: AppIntegration;
    }): Promise<AnonApi.GetAccountApiV1SessionStatusResponse>;
}
export {};
//# sourceMappingURL=index.d.ts.map