import { LocalProxyConfig, type Cookie, type RuntimeEnvironment, type Session } from "@anon/account-types";
import { Proxy } from "@anon/proxy-types";
import { Browser, BrowserContext, BrowserContextOptions, LaunchOptions, Page, Cookie as PlaywrightCookie } from "playwright";
import { z } from "zod";
export declare const managedBrowserEnvironmentInputSchema: z.ZodObject<{
    apiKey: z.ZodString;
    env: z.ZodString;
    proxy: z.ZodOptional<z.ZodObject<{
        server: z.ZodString;
        bypass: z.ZodOptional<z.ZodString>;
        username: z.ZodOptional<z.ZodString>;
        password: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        server: string;
        bypass?: string | undefined;
        username?: string | undefined;
        password?: string | undefined;
    }, {
        server: string;
        bypass?: string | undefined;
        username?: string | undefined;
        password?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    apiKey: string;
    env: string;
    proxy?: {
        server: string;
        bypass?: string | undefined;
        username?: string | undefined;
        password?: string | undefined;
    } | undefined;
}, {
    apiKey: string;
    env: string;
    proxy?: {
        server: string;
        bypass?: string | undefined;
        username?: string | undefined;
        password?: string | undefined;
    } | undefined;
}>;
export type ManagedBrowserEnvironmentInput = z.infer<typeof managedBrowserEnvironmentInputSchema>;
/**
 * Proxy settings to either use Anon's proxy or not using any proxy at all
 */
export type AnonProxyConfig = {
    isAnonProxyEnabled?: boolean;
};
export type ProxyConfig = LocalProxyConfig | AnonProxyConfig;
/**
 * When using a local runtime environment, that runtime environment can use the current existing launch options.
 * Additionally, the user has the option to specify a proxy to use for the browser. Namely, the user can supply their own proxy, use Anon's proxy, or not use any proxy at all.
 */
export type LocalBrowserLaunchInput = Omit<LaunchOptions, "proxy"> & {
    proxy?: ProxyConfig;
};
/**
 * A way to select how to launch a browser. "local" type is for launching a browser on a local
 * machine. "managed" type is for launching a browser on Anon's backend. "remote" and
 * "self-hosted" type is for connecting to a remote browser based on a URL. Note that "remote"
 * type is deprecated and should be replaced with "self-hosted"
 */
export type BrowserLaunchInput<T = {}> = {
    type: "local";
    input: LocalBrowserLaunchInput;
} | {
    type: "remote" | "self-hosted";
    input: string;
} | {
    type: "managed";
    input: T;
};
export declare function getBrowserRuntimeEnvironment(input: ManagedBrowserEnvironmentInput): Promise<RuntimeEnvironment>;
export declare function initializeAnonLocalBrowser(input: LocalBrowserLaunchInput): Promise<Browser>;
export declare function initializeAnonManagedBrowser(input: ManagedBrowserEnvironmentInput): Promise<Browser>;
export declare function initializeAnonRemoteBrowser(input: string): Promise<Browser>;
export declare function initializeAnonBrowser(options: BrowserLaunchInput<ManagedBrowserEnvironmentInput>): Promise<Browser>;
export declare function setupAnonBrowserContext(browser: Browser, proxy?: LocalProxyConfig | Proxy, // HACK: We have two types of proxies, LocalProxyConfig and Proxy, for backwards compatibility
contextOptions?: Omit<BrowserContextOptions, "proxy">): Promise<BrowserContext>;
export declare function setupAnonBrowserWithContext(browserLaunchOptions: BrowserLaunchInput<ManagedBrowserEnvironmentInput>, proxy?: LocalProxyConfig | Proxy, // HACK: We have two types of proxies, LocalProxyConfig and Proxy, for backwards compatibility
contextOptions?: Omit<BrowserContextOptions, "proxy">): Promise<{
    browser: Browser;
    browserContext: BrowserContext;
}>;
export declare function addAnonSession(page: Page, session: Session): Promise<void>;
export declare function makePlaywrightCookie(cookie: Cookie): PlaywrightCookie;
export declare function extractProxyConfig(proxy?: Proxy): LocalProxyConfig | undefined;
export declare class FailedToAddSessionError extends Error {
    readonly sessionId?: string | undefined;
    readonly cause?: unknown;
    constructor(message: string, sessionId?: string | undefined, cause?: unknown);
}
export declare function proxyBrowser<T>(browser: Browser, browserConfig: BrowserLaunchInput<T>): Browser;
//# sourceMappingURL=index.d.ts.map