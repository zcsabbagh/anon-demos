/**
 * LinkedIn Automation Tools
 *
 * This module provides a set of functions to automate various LinkedIn tasks using Playwright.
 * These tools can be used to create posts, manage connections, send messages, and more.
 */
import { Page } from "playwright";
import { NetworkHelper } from "../networkHelper.js";
export type LinkedInSearchQueryType = "People" | "Companies";
export type LinkedInConnection = {
    name: string;
    title: string;
    profileUrl: string;
};
export type LinkedInFollowResult = {
    type: "Success";
} | {
    type: "No Effect";
} | {
    type: "Error";
    description?: string;
};
/**
 * Creates a LinkedIn post. Your page must be logged in and must be on the LinkedIn home page to create a post
 * @param networkHelper - Helper object for network-related operations
 * @param postContent
 * @returns
 */
export declare const createPost: (networkHelper: NetworkHelper, postContent: string) => (page: Page) => Promise<void>;
/**
 * Gets the LinkedIn connections of the currently logged in user
 * @param networkHelper - Helper object for network-related operations
 * @returns
 */
export declare const getConnections: (networkHelper: NetworkHelper) => (page: Page) => Promise<LinkedInConnection[]>;
/**
 * Follows a LinkedIn company page. You must be on the LinkedIn home page to follow a company page
 * @param networkHelper - Helper object for network-related operations
 * @param companyName - The name of the company to follow
 * @returns
 */
export declare const followCompanyPage: (networkHelper: NetworkHelper, companyName: string) => (page: Page) => Promise<LinkedInFollowResult>;
/**
 * Sends a LinkedIn message to a recipient. Your page must be logged in and must be on the recipient's profile page to send a message
 * @param networkHelper - Helper object for network-related operations
 * @param recipient - The name of the recipient
 * @param message - The message to send
 * @returns
 */
export declare const sendMessage: (networkHelper: NetworkHelper, recipient: string, message: string) => (page: Page) => Promise<void>;
/**
 * Gets the general information and contact info of a LinkedIn user. Your page must be logged in and must be on the user's profile page to get the user info
 * @param networkHelper - Helper object for network-related operations
 * @param personName - The name of the person to get info for
 * @returns
 */
export declare const getUserInfo: (networkHelper: NetworkHelper, personName: string) => (page: Page) => Promise<{
    contactInfo: {
        [key: string]: string | string[] | {
            url: string;
            type: string;
        }[];
    };
    name: string | null;
    currentPosition: string | null;
}>;
/**
 * Sends a LinkedIn connection request to a person. This would only work if you are not connected with the person and that person is a 2nd degree connection
 * @param networkHelper - Helper object for network-related operations
 * @param personName - The name of the person to send a connection request to
 * @param message - The message to send with the connection request
 * @returns
 */
export declare const sendConnectionRequest: (networkHelper: NetworkHelper, personName: string, message?: string) => (page: Page) => Promise<void>;
/**
 * Sends a LinkedIn message to a person. Your page must be logged in and must be on the recipient's profile page to send a message. That person must be a 1st degree connection to the delegated user
 * @param networkHelper - Helper object for network-related operations
 * @param message - The message to send
 * @param page - Playwright Page object. The page must be on the recipient's profile page
 */
export declare const sendMessageOnProfilePage: (networkHelper: NetworkHelper, message: string, page: Page) => Promise<void>;
/**
 * Clicks on the first result of a search page based on the search query type. Your page must be on the search page to click on the first result
 * @param type - The type of search query. Can be "People" or "Companies"
 * @param page - Playwright Page object. The page must be on the search page
 * @param networkHelper - Helper object for network-related operations
 */
export declare function clickFirstResultOnSearchPage(type: LinkedInSearchQueryType, page: Page, networkHelper: NetworkHelper): Promise<void>;
/**
 * Writes a search query  on LinkedIn. You must be on the LinkedIn home page to search
 * @param page - Playwright Page object. The page must be on the LinkedIn home page
 * @param networkHelper - Helper object for network-related operations
 * @param query Query to search for
 */
export declare function searchOnHomePage(page: Page, networkHelper: NetworkHelper, query: string): Promise<void>;
export declare const clickConnectButtonOnPersonPage: (page: Page, networkHelper: NetworkHelper) => Promise<void>;
export declare const fulfillConnectionRequestOnConnectionModal: (page: Page, networkHelper: NetworkHelper, personName: string, message?: string) => Promise<void>;
/**
 * Reads the profile intro of a LinkedIn user. The user must be on a profile page of a person to read the profile intro
 * @param page - Playwright Page object
 * @param networkHelper - Helper object for network-related operations
 * @returns
 */
export declare function readProfileIntroOnPersonPage(page: Page, networkHelper: NetworkHelper): Promise<{
    name: string | null;
    currentPosition: string | null;
}>;
/**
 * Reads the contact info of a LinkedIn user. This assumes that the user is on the contact info modal of a person
 * @param page - Playwright Page object. The page must be on the contact info modal of a person
 * @param networkHelper - Helper object for network-related operations
 * @returns
 */
export declare function readContactInfoOnContactModal(page: Page, networkHelper: NetworkHelper): Promise<{
    [key: string]: string | string[] | {
        url: string;
        type: string;
    }[];
}>;
/**
 * Clicks on the connect button on a LinkedIn profile page and runs callback that is designed for that callback. The user must be on a profile page of a person to click the connect button.
 * @param page - The Playwright Page object. The page must be on the profile page of a person
 * @param networkHelper - Helper object for network-related operations
 * @param operation - callback function that is designed to run after the connect button is clicked
 * @returns
 */
export declare function withContactInfoModal<T>(page: Page, networkHelper: NetworkHelper, operation: (page: Page, networkHelper: NetworkHelper) => Promise<T>): Promise<T>;
/**
 * Follows a LinkedIn company page. You must be on the LinkedIn company page to follow a company page
 * @param page - Playwright Page object. The page must be on the company page
 * @param networkHelper - Helper object for network-related operations
 * @param companyName - The name of the company to follow
 * @returns
 */
export declare function followCompanyOnCompanyPage(page: Page, networkHelper: NetworkHelper, companyName?: string): Promise<LinkedInFollowResult>;
/**
 * Opens the post creation modal on LinkedIn.
 * @param networkHelper - Helper object for network-related operations
 * @param page - Playwright Page object. The page must be on the LinkedIn home page
 * @throws Error if unable to open the post creation modal
 */
export declare const clickOnPostModal: (networkHelper: NetworkHelper, page: Page) => Promise<void>;
/**
 * Writes the content of a post in the LinkedIn post creation modal.
 * @param networkHelper - Helper object for network-related operations
 * @param postContent - The content to be written in the post
 * @param page - Playwright Page object. The page must be on the LinkedIn post creation modal
 * @throws Error if unable to write the post content
 */
export declare const writePostContent: (networkHelper: NetworkHelper, postContent: string, page: Page) => Promise<void>;
/**
 * Clicks the 'Post' button to publish the LinkedIn post.
 * @param networkHelper - Helper object for network-related operations
 * @param page - Playwright Page object. The page must be on the LinkedIn post creation modal and the text must be filled
 * @throws Error if unable to click the 'Post' button or confirm post creation
 */
export declare const clickPostButton: (networkHelper: NetworkHelper, page: Page) => Promise<void>;
/**
 * Navigates to the user's own LinkedIn profile page.
 * @param networkHelper - Helper object for network-related operations
 * @param page - Playwright Page object. The page must be on the LinkedIn home page
 * @throws Error if unable to navigate to the profile page
 */
export declare const navigateToProfile: (networkHelper: NetworkHelper, page: Page) => Promise<void>;
/**
 * Reads and extracts information about the user's LinkedIn connections from the connections page.
 * @param networkHelper - Helper object for network-related operations
 * @param page - Playwright Page object. The page must be on the LinkedIn connections page
 * @returns An array of LinkedInConnection objects containing connection information
 * @throws Error if unable to read connection information
 */
export declare const readContactsFromConnectionPage: (networkHelper: NetworkHelper, page: Page) => Promise<LinkedInConnection[]>;
/**
 * Navigates to the user's LinkedIn connections page.
 * @param networkHelper - Helper object for network-related operations
 * @param page - Playwright Page object. The page must be on a profile page
 * @throws Error if unable to navigate to the connections page
 */
export declare const navigateToConnections: (networkHelper: NetworkHelper, page: Page) => Promise<void>;
declare const _default: {
    createPost: (networkHelper: NetworkHelper, postContent: string) => (page: Page) => Promise<void>;
    getConnections: (networkHelper: NetworkHelper) => (page: Page) => Promise<LinkedInConnection[]>;
    followCompanyPage: (networkHelper: NetworkHelper, companyName: string) => (page: Page) => Promise<LinkedInFollowResult>;
    sendMessage: (networkHelper: NetworkHelper, recipient: string, message: string) => (page: Page) => Promise<void>;
    getUserInfo: (networkHelper: NetworkHelper, personName: string) => (page: Page) => Promise<{
        contactInfo: {
            [key: string]: string | string[] | {
                url: string;
                type: string;
            }[];
        };
        name: string | null;
        currentPosition: string | null;
    }>;
    sendConnectionRequest: (networkHelper: NetworkHelper, personName: string, message?: string) => (page: Page) => Promise<void>;
    sendMessageOnProfilePage: (networkHelper: NetworkHelper, message: string, page: Page) => Promise<void>;
    clickFirstResultOnSearchPage: typeof clickFirstResultOnSearchPage;
    searchOnHomePage: typeof searchOnHomePage;
    clickConnectButtonOnPersonPage: (page: Page, networkHelper: NetworkHelper) => Promise<void>;
    fulfillConnectionRequestOnConnectionModal: (page: Page, networkHelper: NetworkHelper, personName: string, message?: string) => Promise<void>;
    readProfileIntroOnPersonPage: typeof readProfileIntroOnPersonPage;
    readContactInfoOnContactModal: typeof readContactInfoOnContactModal;
    readContactsFromConnectionPage: (networkHelper: NetworkHelper, page: Page) => Promise<LinkedInConnection[]>;
    withContactInfoModal: typeof withContactInfoModal;
    followCompanyOnCompanyPage: typeof followCompanyOnCompanyPage;
    clickOnPostModal: (networkHelper: NetworkHelper, page: Page) => Promise<void>;
    writePostContent: (networkHelper: NetworkHelper, postContent: string, page: Page) => Promise<void>;
    clickPostButton: (networkHelper: NetworkHelper, page: Page) => Promise<void>;
    navigateToProfile: (networkHelper: NetworkHelper, page: Page) => Promise<void>;
    navigateToConnections: (networkHelper: NetworkHelper, page: Page) => Promise<void>;
};
export default _default;
//# sourceMappingURL=index.d.ts.map