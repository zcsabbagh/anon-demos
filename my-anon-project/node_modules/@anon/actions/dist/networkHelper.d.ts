import { Page } from "playwright";
export declare class NetworkHelper {
    networkTimeout: number;
    private maxRetries;
    constructor(networkTimeout?: number, maxRetries?: number);
    waitForNetworkIdle(page: Page, timeout?: number): Promise<void>;
    waitForPageLoad(page: Page): Promise<void>;
    waitForSelector(page: Page, selector: string, state?: "attached" | "detached" | "visible" | "hidden", timeout?: number): Promise<import("playwright-core/types/structs").ElementHandleForTag<string> | null | undefined>;
    retryWithBackoff<T>(action: () => Promise<T>, maxRetries?: number, baseDelay?: number): Promise<T>;
    takeScreenshot(page: Page, prefix: string, name: string): Promise<void>;
}
//# sourceMappingURL=networkHelper.d.ts.map