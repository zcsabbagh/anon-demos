/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as AnonApi from "../../../index";
export declare namespace Activity {
  interface Options {
    environment?: core.Supplier<environments.AnonApiEnvironment | string>;
    token: core.Supplier<core.BearerToken>;
    /** Override the X-Anon-Sdk-Client-Id header */
    anonSdkClientId: core.Supplier<string>;
  }
  interface RequestOptions {
    /** The maximum time to wait for a response in seconds. */
    timeoutInSeconds?: number;
    /** The number of times to retry the request. Defaults to 2. */
    maxRetries?: number;
    /** A hook to abort the request. */
    abortSignal?: AbortSignal;
    /** Override the X-Anon-Sdk-Client-Id header */
    anonSdkClientId?: string;
  }
}
export declare class Activity {
  protected readonly _options: Activity.Options;
  constructor(_options: Activity.Options);
  /**
   * Retrieve all events for an organization via organizationId. The organizationId is retrieved from the api key via kong. It can also query by both group id and session type.
   *
   * @param {AnonApi.GetActivityEventsRequest} request
   * @param {Activity.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.activity.getActivityEvents({
   *         groupId: "string",
   *         activityType: "Link"
   *     })
   */
  getActivityEvents(
    request?: AnonApi.GetActivityEventsRequest,
    requestOptions?: Activity.RequestOptions,
  ): Promise<AnonApi.ActivityEventList>;
  /**
   * Create an activity event
   *
   * @param {AnonApi.CreateEventRequestBody} request
   * @param {Activity.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.activity.createEvent({
   *         activityType: "link",
   *         datetime: 1,
   *         groupId: "string",
   *         data: {
   *             app: "string",
   *             type: "linkStart"
   *         },
   *         userId: "string"
   *     })
   */
  createEvent(
    request: AnonApi.CreateEventRequestBody,
    requestOptions?: Activity.RequestOptions,
  ): Promise<AnonApi.CreateEventResponse>;
  /**
   * Create an event to an existing activity
   *
   * @param {string} groupId - ID of the activity to add the event to
   * @param {AnonApi.CreateEventRequestBody} request
   * @param {Activity.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.activity.createEventWithGroupId("string", {
   *         activityType: "link",
   *         datetime: 1,
   *         groupId: "string",
   *         data: {
   *             app: "string",
   *             type: "linkStart"
   *         },
   *         userId: "string"
   *     })
   */
  createEventWithGroupId(
    groupId: string,
    request: AnonApi.CreateEventRequestBody,
    requestOptions?: Activity.RequestOptions,
  ): Promise<AnonApi.CreateEventResponse>;
  protected _getAuthorizationHeader(): Promise<string>;
}
