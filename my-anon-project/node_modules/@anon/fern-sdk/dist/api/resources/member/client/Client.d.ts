/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as AnonApi from "../../../index";
export declare namespace Member {
  interface Options {
    environment?: core.Supplier<environments.AnonApiEnvironment | string>;
    token: core.Supplier<core.BearerToken>;
    /** Override the X-Anon-Sdk-Client-Id header */
    anonSdkClientId: core.Supplier<string>;
  }
  interface RequestOptions {
    /** The maximum time to wait for a response in seconds. */
    timeoutInSeconds?: number;
    /** The number of times to retry the request. Defaults to 2. */
    maxRetries?: number;
    /** A hook to abort the request. */
    abortSignal?: AbortSignal;
    /** Override the X-Anon-Sdk-Client-Id header */
    anonSdkClientId?: string;
  }
}
export declare class Member {
  protected readonly _options: Member.Options;
  constructor(_options: Member.Options);
  /**
   * This endpoint creates and adds a new `Member` to an `Organization`.
   *
   * @param {AnonApi.CreateMember} request
   * @param {Member.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @throws {@link AnonApi.MissingFieldError}
   * @throws {@link AnonApi.MissingBodyError}
   *
   * @example
   *     await client.member.createMember({
   *         name: "string",
   *         email: "string",
   *         password: "string",
   *         role: "Admin"
   *     })
   */
  createMember(
    request: AnonApi.CreateMember,
    requestOptions?: Member.RequestOptions,
  ): Promise<AnonApi.Member>;
  /**
   * This endpoint looks up an existing `Member`.
   *
   * @param {AnonApi.MemberId} memberId - ID of the Member
   * @param {Member.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.member.getMember("string")
   */
  getMember(
    memberId: AnonApi.MemberId,
    requestOptions?: Member.RequestOptions,
  ): Promise<AnonApi.Member>;
  /**
   * List all the members in your organization
   *
   * @param {Member.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.member.listMembers()
   */
  listMembers(
    requestOptions?: Member.RequestOptions,
  ): Promise<AnonApi.MemberList>;
  /**
   * This endpoint returns an Anon Bearer Session token using `Member` credentials.
   *
   * @param {AnonApi.LoginMember} request
   * @param {Member.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.member.login({
   *         email: "string",
   *         password: "string"
   *     })
   */
  login(
    request: AnonApi.LoginMember,
    requestOptions?: Member.RequestOptions,
  ): Promise<AnonApi.LoginSession>;
  protected _getAuthorizationHeader(): Promise<string>;
}
