/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as AnonApi from "../../../index";
export declare namespace Run {
  interface Options {
    environment?: core.Supplier<environments.AnonApiEnvironment | string>;
    token: core.Supplier<core.BearerToken>;
    /** Override the X-Anon-Sdk-Client-Id header */
    anonSdkClientId: core.Supplier<string>;
  }
  interface RequestOptions {
    /** The maximum time to wait for a response in seconds. */
    timeoutInSeconds?: number;
    /** The number of times to retry the request. Defaults to 2. */
    maxRetries?: number;
    /** A hook to abort the request. */
    abortSignal?: AbortSignal;
    /** Override the X-Anon-Sdk-Client-Id header */
    anonSdkClientId?: string;
  }
}
export declare class Run {
  protected readonly _options: Run.Options;
  constructor(_options: Run.Options);
  /**
   * Returns a URL that can be used with Playwright's [connectOverCdp](https://playwright.dev/docs/api/class-browsertype#browser-type-connect-over-cdp) method to connect your local Playwright instance to an Anon-managed browser instance where the desired integration account has already been logged in.
   *
   * @param {AnonApi.CreateCdpUrlRequest} request
   * @param {Run.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.run.createCdpUrl({
   *         apps: ["string"],
   *         appUserId: "string",
   *         activityGroupId: "string",
   *         proxy: false,
   *         cdpUrl: "string",
   *         sessionDuration: 1
   *     })
   */
  createCdpUrl(
    request: AnonApi.CreateCdpUrlRequest,
    requestOptions?: Run.RequestOptions,
  ): Promise<AnonApi.CreateCdpUrlResponse>;
  protected _getAuthorizationHeader(): Promise<string>;
}
