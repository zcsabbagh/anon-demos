/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as AnonApi from "../../../index";
export declare namespace Actions {
  interface Options {
    environment?: core.Supplier<environments.AnonApiEnvironment | string>;
    token: core.Supplier<core.BearerToken>;
    /** Override the X-Anon-Sdk-Client-Id header */
    anonSdkClientId: core.Supplier<string>;
  }
  interface RequestOptions {
    /** The maximum time to wait for a response in seconds. */
    timeoutInSeconds?: number;
    /** The number of times to retry the request. Defaults to 2. */
    maxRetries?: number;
    /** A hook to abort the request. */
    abortSignal?: AbortSignal;
    /** Override the X-Anon-Sdk-Client-Id header */
    anonSdkClientId?: string;
  }
}
export declare class Actions {
  protected readonly _options: Actions.Options;
  constructor(_options: Actions.Options);
  /**
   * Output a list of the user's LinkedIn conversations
   *
   * @param {AnonApi.LinkedinListConversationsQuery} request
   * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.actions.linkedinListConversations({
   *         profileName: "string",
   *         profileId: "string",
   *         appUserId: "string",
   *         contentType: "string",
   *         appUserPoolId: "string"
   *     })
   */
  linkedinListConversations(
    request: AnonApi.LinkedinListConversationsQuery,
    requestOptions?: Actions.RequestOptions,
  ): Promise<AnonApi.LinkedinListConversationsResponse>;
  /**
   * Output a list of the user's LinkedIn connections
   *
   * @param {AnonApi.LinkedinListConnectionsQuery} request
   * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.actions.linkedinListConnections({
   *         cursor: "string",
   *         profileName: "string",
   *         appUserId: "string",
   *         appUserPoolId: "string"
   *     })
   */
  linkedinListConnections(
    request: AnonApi.LinkedinListConnectionsQuery,
    requestOptions?: Actions.RequestOptions,
  ): Promise<AnonApi.LinkedinListConnectionsResponse>;
  /**
   * Create a new LinkedIn conversation
   *
   * @param {AnonApi.LinkedinCreateConversationBody} request
   * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.actions.linkedinCreateConversation({
   *         profileId: "string",
   *         appUserId: "string",
   *         message: "string",
   *         appUserPoolId: "string"
   *     })
   */
  linkedinCreateConversation(
    request: AnonApi.LinkedinCreateConversationBody,
    requestOptions?: Actions.RequestOptions,
  ): Promise<AnonApi.LinkedinCreateConversationResponse>;
  /**
   * Get the message history and metadata of a specific LinkedIn conversation
   *
   * @param {AnonApi.LinkedinGetConversationQuery} request
   * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.actions.linkedinGetConversation({
   *         id: "string",
   *         appUserId: "string",
   *         appUserPoolId: "string"
   *     })
   */
  linkedinGetConversation(
    request: AnonApi.LinkedinGetConversationQuery,
    requestOptions?: Actions.RequestOptions,
  ): Promise<AnonApi.LinkedinGetConversationResponse>;
  /**
   * Get the message history and metadata of a specific LinkedIn conversation
   *
   * @param {AnonApi.LinkedinListMessagesQuery} request
   * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.actions.linkedinListMessages({
   *         id: "string",
   *         appUserId: "string",
   *         appUserPoolId: "string"
   *     })
   */
  linkedinListMessages(
    request: AnonApi.LinkedinListMessagesQuery,
    requestOptions?: Actions.RequestOptions,
  ): Promise<AnonApi.LinkedinListMessagesResponse>;
  /**
   * Send a message on LinkedIn
   *
   * @param {AnonApi.LinkedinSendMessageBody} request
   * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.actions.linkedinSendMessage({
   *         message: "string",
   *         appUserId: "string",
   *         conversationId: "string",
   *         appUserPoolId: "string"
   *     })
   */
  linkedinSendMessage(
    request: AnonApi.LinkedinSendMessageBody,
    requestOptions?: Actions.RequestOptions,
  ): Promise<AnonApi.LinkedinSendMessageResponse>;
  /**
   * Get the profile information of a LinkedIn user
   *
   * @param {AnonApi.LinkedinGetProfileRequest} request
   * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.actions.linkedinGetProfile({
   *         id: "string",
   *         appUserId: "string",
   *         appUserPoolId: "string"
   *     })
   */
  linkedinGetProfile(
    request: AnonApi.LinkedinGetProfileRequest,
    requestOptions?: Actions.RequestOptions,
  ): Promise<AnonApi.LinkedinGetProfileResponse>;
  /**
   * Send a connection request to a LinkedIn user
   *
   * @param {AnonApi.LinkedinSendConnectionRequestBody} request
   * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.actions.linkedinSendConnectionRequest({
   *         profileId: "string",
   *         appUserId: "string",
   *         message: "string",
   *         appUserPoolId: "string"
   *     })
   */
  linkedinSendConnectionRequest(
    request: AnonApi.LinkedinSendConnectionRequestBody,
    requestOptions?: Actions.RequestOptions,
  ): Promise<AnonApi.LinkedinSendConnectionRequestResponse>;
  /**
   * Search for LinkedIn profiles by name
   *
   * @param {AnonApi.LinkedinSearchProfilesBody} request
   * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.actions.linkedinSearchProfiles({
   *         cursor: "string",
   *         profileName: "string",
   *         connectionsOf: "string",
   *         appUserId: "string",
   *         networkDistance: ["1"],
   *         appUserPoolId: "string"
   *     })
   */
  linkedinSearchProfiles(
    request: AnonApi.LinkedinSearchProfilesBody,
    requestOptions?: Actions.RequestOptions,
  ): Promise<AnonApi.LinkedinSearchProfilesResponse>;
  protected _getAuthorizationHeader(): Promise<string>;
}
