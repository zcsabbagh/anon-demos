/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as AnonApi from "../../../index";
export declare namespace UserPool {
  interface Options {
    environment?: core.Supplier<environments.AnonApiEnvironment | string>;
    token: core.Supplier<core.BearerToken>;
    /** Override the X-Anon-Sdk-Client-Id header */
    anonSdkClientId: core.Supplier<string>;
  }
  interface RequestOptions {
    /** The maximum time to wait for a response in seconds. */
    timeoutInSeconds?: number;
    /** The number of times to retry the request. Defaults to 2. */
    maxRetries?: number;
    /** A hook to abort the request. */
    abortSignal?: AbortSignal;
    /** Override the X-Anon-Sdk-Client-Id header */
    anonSdkClientId?: string;
  }
}
export declare class UserPool {
  protected readonly _options: UserPool.Options;
  constructor(_options: UserPool.Options);
  /**
   * This endpoint creates a new `UserPool`. UserPools associate a particular application with a group of users, and determines how those users are identified and authenticated via the `authorization` field. `authorization` should use the public JWKS URI of your identity provider. If you would like to use an `idClaim` other than the default `sub`, such as `email`, you may specify it here as well. If `authorization` is omitted, the UserPool will be configured as "Anon-hosted". This means you can use Anon as your identity provider by issuing AppUserIdTokens from `/org/appUserIdToken`.
   *
   * @param {AnonApi.CreateUserPool} request
   * @param {UserPool.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.userPool.createUserPool({
   *         name: "string",
   *         description: "string",
   *         authorization: {
   *             jwksUri: "string",
   *             idClaim: "string"
   *         }
   *     })
   */
  createUserPool(
    request: AnonApi.CreateUserPool,
    requestOptions?: UserPool.RequestOptions,
  ): Promise<AnonApi.UserPool>;
  /**
   * This endpoint looks up an existing `UserPool`.
   *
   * @param {string} userPoolId - ID of the `UserPool`.
   * @param {UserPool.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.userPool.getUserPool("string")
   */
  getUserPool(
    userPoolId: string,
    requestOptions?: UserPool.RequestOptions,
  ): Promise<AnonApi.UserPool>;
  /**
   * Lists all UserPools in your organization.
   *
   * @param {UserPool.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.userPool.listUserPools()
   */
  listUserPools(
    requestOptions?: UserPool.RequestOptions,
  ): Promise<AnonApi.UserPoolList>;
  protected _getAuthorizationHeader(): Promise<string>;
}
