/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as AnonApi from "../../../index";
export declare namespace AppUserIdToken {
  interface Options {
    environment?: core.Supplier<environments.AnonApiEnvironment | string>;
    token: core.Supplier<core.BearerToken>;
    /** Override the X-Anon-Sdk-Client-Id header */
    anonSdkClientId: core.Supplier<string>;
  }
  interface RequestOptions {
    /** The maximum time to wait for a response in seconds. */
    timeoutInSeconds?: number;
    /** The number of times to retry the request. Defaults to 2. */
    maxRetries?: number;
    /** A hook to abort the request. */
    abortSignal?: AbortSignal;
    /** Override the X-Anon-Sdk-Client-Id header */
    anonSdkClientId?: string;
  }
}
export declare class AppUserIdToken {
  protected readonly _options: AppUserIdToken.Options;
  constructor(_options: AppUserIdToken.Options);
  /**
   * Issues a new `AppUserIdToken` to be used as a bearer token for authenticating app user traffic. **Can only be used with Anon-hosted UserPools**. In this case, Anon serves as your identity provider, issuing and validating tokens for your users. For each app user you want to connect to Anon, call this endpoint with that user's ID to issue an AppUserIdToken that they can use for authentication with Anon. This credential is sensitive and can be used to access that user's sessions, so it should be stored securely or not at all. You may call this route whenever you need to issue a new AppUserIdToken (for example, upon login or token expiration). Duplicate calls with the same user ID will refresh the expiration, but will have no other effects. Takes an optional `exp`iration; this defaults to 6 months from time of issuing.
   *
   * @param {AnonApi.CreateAppUserIdToken} request
   * @param {AppUserIdToken.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.appUserIdToken.createAppUserIdToken({
   *         appUserId: "string",
   *         exp: 1
   *     })
   */
  createAppUserIdToken(
    request: AnonApi.CreateAppUserIdToken,
    requestOptions?: AppUserIdToken.RequestOptions,
  ): Promise<AnonApi.AppUserIdToken>;
  protected _getAuthorizationHeader(): Promise<string>;
}
