"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding =
  (this && this.__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (
          !desc ||
          ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)
        ) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            },
          };
        }
        Object.defineProperty(o, k2, desc);
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
var __setModuleDefault =
  (this && this.__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      }
    : function (o, v) {
        o["default"] = v;
      });
var __importStar =
  (this && this.__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
var __awaiter =
  (this && this.__awaiter) ||
  function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P
        ? value
        : new P(function (resolve) {
            resolve(value);
          });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done
          ? resolve(result.value)
          : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, "__esModule", { value: true });
exports.Organization = void 0;
const environments = __importStar(require("../../../../environments"));
const core = __importStar(require("../../../../core"));
const serializers = __importStar(require("../../../../serialization/index"));
const url_join_1 = __importDefault(require("url-join"));
const errors = __importStar(require("../../../../errors/index"));
class Organization {
  constructor(_options) {
    this._options = _options;
  }
  /**
   * This endpoint creates a new `Organization`.
   *
   * @param {AnonApi.CreateOrganization} request
   * @param {Organization.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.organization.createOrganization({
   *         name: "string",
   *         member: {
   *             name: "string",
   *             email: "string",
   *             password: "string"
   *         }
   *     })
   */
  createOrganization(request, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.AnonApiEnvironment.Sandbox,
          "/org/organization",
        ),
        method: "POST",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Anon-Sdk-Client-Id": yield core.Supplier.get(
            this._options.anonSdkClientId,
          ),
          "X-Fern-Language": "JavaScript",
          "X-Fern-Runtime": core.RUNTIME.type,
          "X-Fern-Runtime-Version": core.RUNTIME.version,
        },
        contentType: "application/json",
        requestType: "json",
        body: serializers.CreateOrganization.jsonOrThrow(request, {
          unrecognizedObjectKeys: "strip",
        }),
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 60000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
        abortSignal:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.abortSignal,
      });
      if (_response.ok) {
        return serializers.Organization.parseOrThrow(_response.body, {
          unrecognizedObjectKeys: "passthrough",
          allowUnrecognizedUnionMembers: true,
          allowUnrecognizedEnumValues: true,
          breadcrumbsPrefix: ["response"],
        });
      }
      if (_response.error.reason === "status-code") {
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.AnonApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.AnonApiTimeoutError();
        case "unknown":
          throw new errors.AnonApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   * This endpoint looks up an existing `Organization`.
   *
   * @param {AnonApi.OrganizationId} organizationId - ID of the Organization
   * @param {AnonApi.GetOrgRequest} request
   * @param {Organization.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.organization.getOrganization("string", {
   *         xForwardedUserId: "string",
   *         xForwardedOrganizationId: "string"
   *     })
   */
  getOrganization(organizationId, request = {}, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const { xForwardedUserId, xForwardedOrganizationId } = request;
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.AnonApiEnvironment.Sandbox,
          `/org/organization/${encodeURIComponent(serializers.OrganizationId.jsonOrThrow(organizationId))}`,
        ),
        method: "GET",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Anon-Sdk-Client-Id": yield core.Supplier.get(
            this._options.anonSdkClientId,
          ),
          "X-Fern-Language": "JavaScript",
          "X-Fern-Runtime": core.RUNTIME.type,
          "X-Fern-Runtime-Version": core.RUNTIME.version,
          userId: xForwardedUserId != null ? xForwardedUserId : undefined,
          orgId:
            xForwardedOrganizationId != null
              ? xForwardedOrganizationId
              : undefined,
        },
        contentType: "application/json",
        requestType: "json",
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 60000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
        abortSignal:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.abortSignal,
      });
      if (_response.ok) {
        return serializers.Organization.parseOrThrow(_response.body, {
          unrecognizedObjectKeys: "passthrough",
          allowUnrecognizedUnionMembers: true,
          allowUnrecognizedEnumValues: true,
          breadcrumbsPrefix: ["response"],
        });
      }
      if (_response.error.reason === "status-code") {
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.AnonApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.AnonApiTimeoutError();
        case "unknown":
          throw new errors.AnonApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   * Get the app user
   *
   * @param {AnonApi.GetAppUserRequest} request
   * @param {Organization.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.organization.appUser({
   *         id: "string",
   *         email: "string",
   *         phoneNumber: "string",
   *         externalUserId: "string",
   *         appUserPoolId: "string"
   *     })
   */
  appUser(request = {}, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const { id, email, phoneNumber, externalUserId, appUserPoolId } = request;
      const _queryParams = {};
      if (id != null) {
        _queryParams["id"] = id;
      }
      if (email != null) {
        _queryParams["email"] = email;
      }
      if (phoneNumber != null) {
        _queryParams["phoneNumber"] = phoneNumber;
      }
      if (externalUserId != null) {
        _queryParams["externalUserId"] = externalUserId;
      }
      if (appUserPoolId != null) {
        _queryParams["appUserPoolId"] = appUserPoolId;
      }
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.AnonApiEnvironment.Sandbox,
          "/org/user",
        ),
        method: "GET",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Anon-Sdk-Client-Id": yield core.Supplier.get(
            this._options.anonSdkClientId,
          ),
          "X-Fern-Language": "JavaScript",
          "X-Fern-Runtime": core.RUNTIME.type,
          "X-Fern-Runtime-Version": core.RUNTIME.version,
        },
        contentType: "application/json",
        queryParameters: _queryParams,
        requestType: "json",
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 60000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
        abortSignal:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.abortSignal,
      });
      if (_response.ok) {
        return serializers.AppUser.parseOrThrow(_response.body, {
          unrecognizedObjectKeys: "passthrough",
          allowUnrecognizedUnionMembers: true,
          allowUnrecognizedEnumValues: true,
          breadcrumbsPrefix: ["response"],
        });
      }
      if (_response.error.reason === "status-code") {
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.AnonApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.AnonApiTimeoutError();
        case "unknown":
          throw new errors.AnonApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   * List all end users in your organization
   *
   * @param {Organization.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.organization.listAppUsers()
   */
  listAppUsers(requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.AnonApiEnvironment.Sandbox,
          "/org/users",
        ),
        method: "GET",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Anon-Sdk-Client-Id": yield core.Supplier.get(
            this._options.anonSdkClientId,
          ),
          "X-Fern-Language": "JavaScript",
          "X-Fern-Runtime": core.RUNTIME.type,
          "X-Fern-Runtime-Version": core.RUNTIME.version,
        },
        contentType: "application/json",
        requestType: "json",
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 60000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
        abortSignal:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.abortSignal,
      });
      if (_response.ok) {
        return serializers.AppUserList.parseOrThrow(_response.body, {
          unrecognizedObjectKeys: "passthrough",
          allowUnrecognizedUnionMembers: true,
          allowUnrecognizedEnumValues: true,
          breadcrumbsPrefix: ["response"],
        });
      }
      if (_response.error.reason === "status-code") {
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.AnonApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.AnonApiTimeoutError();
        case "unknown":
          throw new errors.AnonApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  _getAuthorizationHeader() {
    return __awaiter(this, void 0, void 0, function* () {
      return `Bearer ${yield core.Supplier.get(this._options.token)}`;
    });
  }
}
exports.Organization = Organization;
