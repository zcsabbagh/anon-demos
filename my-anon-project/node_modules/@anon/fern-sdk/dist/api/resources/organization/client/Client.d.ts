/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as AnonApi from "../../../index";
export declare namespace Organization {
  interface Options {
    environment?: core.Supplier<environments.AnonApiEnvironment | string>;
    token: core.Supplier<core.BearerToken>;
    /** Override the X-Anon-Sdk-Client-Id header */
    anonSdkClientId: core.Supplier<string>;
  }
  interface RequestOptions {
    /** The maximum time to wait for a response in seconds. */
    timeoutInSeconds?: number;
    /** The number of times to retry the request. Defaults to 2. */
    maxRetries?: number;
    /** A hook to abort the request. */
    abortSignal?: AbortSignal;
    /** Override the X-Anon-Sdk-Client-Id header */
    anonSdkClientId?: string;
  }
}
export declare class Organization {
  protected readonly _options: Organization.Options;
  constructor(_options: Organization.Options);
  /**
   * This endpoint creates a new `Organization`.
   *
   * @param {AnonApi.CreateOrganization} request
   * @param {Organization.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.organization.createOrganization({
   *         name: "string",
   *         member: {
   *             name: "string",
   *             email: "string",
   *             password: "string"
   *         }
   *     })
   */
  createOrganization(
    request: AnonApi.CreateOrganization,
    requestOptions?: Organization.RequestOptions,
  ): Promise<AnonApi.Organization>;
  /**
   * This endpoint looks up an existing `Organization`.
   *
   * @param {AnonApi.OrganizationId} organizationId - ID of the Organization
   * @param {AnonApi.GetOrgRequest} request
   * @param {Organization.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.organization.getOrganization("string", {
   *         xForwardedUserId: "string",
   *         xForwardedOrganizationId: "string"
   *     })
   */
  getOrganization(
    organizationId: AnonApi.OrganizationId,
    request?: AnonApi.GetOrgRequest,
    requestOptions?: Organization.RequestOptions,
  ): Promise<AnonApi.Organization>;
  /**
   * Get the app user
   *
   * @param {AnonApi.GetAppUserRequest} request
   * @param {Organization.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.organization.appUser({
   *         id: "string",
   *         email: "string",
   *         phoneNumber: "string",
   *         externalUserId: "string",
   *         appUserPoolId: "string"
   *     })
   */
  appUser(
    request?: AnonApi.GetAppUserRequest,
    requestOptions?: Organization.RequestOptions,
  ): Promise<AnonApi.AppUser>;
  /**
   * List all end users in your organization
   *
   * @param {Organization.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.organization.listAppUsers()
   */
  listAppUsers(
    requestOptions?: Organization.RequestOptions,
  ): Promise<AnonApi.AppUserList>;
  protected _getAuthorizationHeader(): Promise<string>;
}
