"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding =
  (this && this.__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (
          !desc ||
          ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)
        ) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            },
          };
        }
        Object.defineProperty(o, k2, desc);
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
var __setModuleDefault =
  (this && this.__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      }
    : function (o, v) {
        o["default"] = v;
      });
var __importStar =
  (this && this.__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
var __awaiter =
  (this && this.__awaiter) ||
  function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P
        ? value
        : new P(function (resolve) {
            resolve(value);
          });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done
          ? resolve(result.value)
          : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, "__esModule", { value: true });
exports.Session = void 0;
const environments = __importStar(require("../../../../environments"));
const core = __importStar(require("../../../../core"));
const url_join_1 = __importDefault(require("url-join"));
const serializers = __importStar(require("../../../../serialization/index"));
const errors = __importStar(require("../../../../errors/index"));
class Session {
  constructor(_options) {
    this._options = _options;
  }
  /**
   * @param {AnonApi.GetAccountApiV1AppIntegrationRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.getAppIntegration({
   *         id: "string"
   *     })
   */
  getAppIntegration(request, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const { id } = request;
      const _queryParams = {};
      _queryParams["id"] = id;
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.AnonApiEnvironment.Sandbox,
          "/account/api/v1/appIntegration",
        ),
        method: "GET",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Anon-Sdk-Client-Id": yield core.Supplier.get(
            this._options.anonSdkClientId,
          ),
          "X-Fern-Language": "JavaScript",
          "X-Fern-Runtime": core.RUNTIME.type,
          "X-Fern-Runtime-Version": core.RUNTIME.version,
        },
        contentType: "application/json",
        queryParameters: _queryParams,
        requestType: "json",
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 60000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
        abortSignal:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.abortSignal,
      });
      if (_response.ok) {
        return serializers.GetAccountApiV1AppIntegrationResponse.parseOrThrow(
          _response.body,
          {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
          },
        );
      }
      if (_response.error.reason === "status-code") {
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.AnonApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.AnonApiTimeoutError();
        case "unknown":
          throw new errors.AnonApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   * @param {AnonApi.PostAccountApiV1BrowserEnvironmentRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.createRuntimeBrowserEnvironment({
   *         proxy: {
   *             server: "string",
   *             bypass: "string",
   *             username: "string",
   *             password: "string"
   *         },
   *         isLiveStreamingSession: true
   *     })
   */
  createRuntimeBrowserEnvironment(request, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.AnonApiEnvironment.Sandbox,
          "/account/api/v1/browser/environment",
        ),
        method: "POST",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Anon-Sdk-Client-Id": yield core.Supplier.get(
            this._options.anonSdkClientId,
          ),
          "X-Fern-Language": "JavaScript",
          "X-Fern-Runtime": core.RUNTIME.type,
          "X-Fern-Runtime-Version": core.RUNTIME.version,
        },
        contentType: "application/json",
        requestType: "json",
        body:
          request != null
            ? serializers.session.createRuntimeBrowserEnvironment.Request.jsonOrThrow(
                request,
                {
                  unrecognizedObjectKeys: "strip",
                },
              )
            : undefined,
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 60000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
        abortSignal:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.abortSignal,
      });
      if (_response.ok) {
        return serializers.PostAccountApiV1BrowserEnvironmentResponse.parseOrThrow(
          _response.body,
          {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
          },
        );
      }
      if (_response.error.reason === "status-code") {
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.AnonApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.AnonApiTimeoutError();
        case "unknown":
          throw new errors.AnonApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   * @param {AnonApi.GetAccountApiV1SessionRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.getSession({
   *         ownerId: "string",
   *         appUserId: "string",
   *         domain: "string"
   *     })
   */
  getSession(request, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const { ownerId, appUserId, domain } = request;
      const _queryParams = {};
      if (ownerId != null) {
        _queryParams["ownerId"] = ownerId;
      }
      if (appUserId != null) {
        _queryParams["appUserId"] = appUserId;
      }
      _queryParams["domain"] = domain;
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.AnonApiEnvironment.Sandbox,
          "/account/api/v1/session",
        ),
        method: "GET",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Anon-Sdk-Client-Id": yield core.Supplier.get(
            this._options.anonSdkClientId,
          ),
          "X-Fern-Language": "JavaScript",
          "X-Fern-Runtime": core.RUNTIME.type,
          "X-Fern-Runtime-Version": core.RUNTIME.version,
        },
        contentType: "application/json",
        queryParameters: _queryParams,
        requestType: "json",
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 60000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
        abortSignal:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.abortSignal,
      });
      if (_response.ok) {
        return serializers.GetAccountApiV1SessionResponse.parseOrThrow(
          _response.body,
          {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
          },
        );
      }
      if (_response.error.reason === "status-code") {
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.AnonApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.AnonApiTimeoutError();
        case "unknown":
          throw new errors.AnonApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   * @param {AnonApi.PostAccountApiV1SessionRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.addSession({
   *         ownerId: "string",
   *         domain: "string",
   *         session: {
   *             id: "string",
   *             status: "active",
   *             cookies: [{
   *                     name: "string",
   *                     value: "string",
   *                     domain: "string",
   *                     path: "string",
   *                     expires: 1.1,
   *                     secure: true,
   *                     hostOnly: true,
   *                     httpOnly: true,
   *                     discard: true,
   *                     session: true,
   *                     partitioned: true,
   *                     sameSite: "unspecified",
   *                     sameSitePolicy: "unspecified",
   *                     storeId: "string"
   *                 }],
   *             localStorage: [["string"]],
   *             sessionStorage: [["string"]],
   *             proxyId: "string",
   *             url: "string"
   *         }
   *     })
   */
  addSession(request, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.AnonApiEnvironment.Sandbox,
          "/account/api/v1/session",
        ),
        method: "POST",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Anon-Sdk-Client-Id": yield core.Supplier.get(
            this._options.anonSdkClientId,
          ),
          "X-Fern-Language": "JavaScript",
          "X-Fern-Runtime": core.RUNTIME.type,
          "X-Fern-Runtime-Version": core.RUNTIME.version,
        },
        contentType: "application/json",
        requestType: "json",
        body: serializers.PostAccountApiV1SessionRequest.jsonOrThrow(request, {
          unrecognizedObjectKeys: "strip",
        }),
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 60000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
        abortSignal:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.abortSignal,
      });
      if (_response.ok) {
        return serializers.PostAccountApiV1SessionResponse.parseOrThrow(
          _response.body,
          {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
          },
        );
      }
      if (_response.error.reason === "status-code") {
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.AnonApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.AnonApiTimeoutError();
        case "unknown":
          throw new errors.AnonApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   * @param {AnonApi.PutAccountApiV1SessionRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.updateSession({
   *         ownerId: "string",
   *         domain: "string",
   *         session: {
   *             id: "string",
   *             status: "active",
   *             cookies: [{
   *                     name: "string",
   *                     value: "string",
   *                     domain: "string",
   *                     path: "string",
   *                     expires: 1.1,
   *                     secure: true,
   *                     hostOnly: true,
   *                     httpOnly: true,
   *                     discard: true,
   *                     session: true,
   *                     partitioned: true,
   *                     sameSite: "unspecified",
   *                     sameSitePolicy: "unspecified",
   *                     storeId: "string"
   *                 }],
   *             localStorage: [["string"]],
   *             sessionStorage: [["string"]],
   *             proxyId: "string",
   *             url: "string"
   *         }
   *     })
   */
  updateSession(request, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.AnonApiEnvironment.Sandbox,
          "/account/api/v1/session",
        ),
        method: "PUT",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Anon-Sdk-Client-Id": yield core.Supplier.get(
            this._options.anonSdkClientId,
          ),
          "X-Fern-Language": "JavaScript",
          "X-Fern-Runtime": core.RUNTIME.type,
          "X-Fern-Runtime-Version": core.RUNTIME.version,
        },
        contentType: "application/json",
        requestType: "json",
        body: serializers.PutAccountApiV1SessionRequest.jsonOrThrow(request, {
          unrecognizedObjectKeys: "strip",
        }),
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 60000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
        abortSignal:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.abortSignal,
      });
      if (_response.ok) {
        return serializers.PutAccountApiV1SessionResponse.parseOrThrow(
          _response.body,
          {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
          },
        );
      }
      if (_response.error.reason === "status-code") {
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.AnonApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.AnonApiTimeoutError();
        case "unknown":
          throw new errors.AnonApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   * Disconnect a previously connected session.
   *
   * @param {AnonApi.DeleteSessionRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.removeSession({
   *         appUserId: "string",
   *         app: "amazon"
   *     })
   */
  removeSession(request, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const { appUserId, app } = request;
      const _queryParams = {};
      _queryParams["appUserId"] = appUserId;
      _queryParams["app"] = app;
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.AnonApiEnvironment.Sandbox,
          "/account/api/v1/session",
        ),
        method: "DELETE",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Anon-Sdk-Client-Id": yield core.Supplier.get(
            this._options.anonSdkClientId,
          ),
          "X-Fern-Language": "JavaScript",
          "X-Fern-Runtime": core.RUNTIME.type,
          "X-Fern-Runtime-Version": core.RUNTIME.version,
        },
        contentType: "application/json",
        queryParameters: _queryParams,
        requestType: "json",
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 60000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
        abortSignal:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.abortSignal,
      });
      if (_response.ok) {
        return serializers.DeleteSessionResponse.parseOrThrow(_response.body, {
          unrecognizedObjectKeys: "passthrough",
          allowUnrecognizedUnionMembers: true,
          allowUnrecognizedEnumValues: true,
          breadcrumbsPrefix: ["response"],
        });
      }
      if (_response.error.reason === "status-code") {
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.AnonApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.AnonApiTimeoutError();
        case "unknown":
          throw new errors.AnonApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   * @param {AnonApi.GetAccountApiV1SessionStatusRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.getSessionStatus({
   *         appUserId: "string",
   *         app: "amazon"
   *     })
   */
  getSessionStatus(request, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const { appUserId, app } = request;
      const _queryParams = {};
      _queryParams["appUserId"] = appUserId;
      _queryParams["app"] = app;
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.AnonApiEnvironment.Sandbox,
          "/account/api/v1/session/status",
        ),
        method: "GET",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Anon-Sdk-Client-Id": yield core.Supplier.get(
            this._options.anonSdkClientId,
          ),
          "X-Fern-Language": "JavaScript",
          "X-Fern-Runtime": core.RUNTIME.type,
          "X-Fern-Runtime-Version": core.RUNTIME.version,
        },
        contentType: "application/json",
        queryParameters: _queryParams,
        requestType: "json",
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 60000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
        abortSignal:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.abortSignal,
      });
      if (_response.ok) {
        return serializers.GetAccountApiV1SessionStatusResponse.parseOrThrow(
          _response.body,
          {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
          },
        );
      }
      if (_response.error.reason === "status-code") {
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.AnonApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.AnonApiTimeoutError();
        case "unknown":
          throw new errors.AnonApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   * @param {AnonApi.GetAccountApiV1SessionRequestRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.getSessionRequestStatus({
   *         id: "string"
   *     })
   */
  getSessionRequestStatus(request, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const { id } = request;
      const _queryParams = {};
      _queryParams["id"] = id;
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.AnonApiEnvironment.Sandbox,
          "/account/api/v1/session/request",
        ),
        method: "GET",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Anon-Sdk-Client-Id": yield core.Supplier.get(
            this._options.anonSdkClientId,
          ),
          "X-Fern-Language": "JavaScript",
          "X-Fern-Runtime": core.RUNTIME.type,
          "X-Fern-Runtime-Version": core.RUNTIME.version,
        },
        contentType: "application/json",
        queryParameters: _queryParams,
        requestType: "json",
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 60000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
        abortSignal:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.abortSignal,
      });
      if (_response.ok) {
        return serializers.GetAccountApiV1SessionRequestResponse.parseOrThrow(
          _response.body,
          {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
          },
        );
      }
      if (_response.error.reason === "status-code") {
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.AnonApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.AnonApiTimeoutError();
        case "unknown":
          throw new errors.AnonApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   * @param {AnonApi.PostAccountApiV1SessionRequestRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.createSessionRequest({
   *         iosPushAuthorization: {
   *             iosAppId: "string",
   *             authToken: "string"
   *         },
   *         account: {
   *             ownerId: "string",
   *             domain: "string"
   *         },
   *         appSdkClientId: "string",
   *         alertBody: "string",
   *         alertTitle: "string"
   *     })
   */
  createSessionRequest(request, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.AnonApiEnvironment.Sandbox,
          "/account/api/v1/session/request",
        ),
        method: "POST",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Anon-Sdk-Client-Id": yield core.Supplier.get(
            this._options.anonSdkClientId,
          ),
          "X-Fern-Language": "JavaScript",
          "X-Fern-Runtime": core.RUNTIME.type,
          "X-Fern-Runtime-Version": core.RUNTIME.version,
        },
        contentType: "application/json",
        requestType: "json",
        body: serializers.PostAccountApiV1SessionRequestRequest.jsonOrThrow(
          request,
          {
            unrecognizedObjectKeys: "strip",
          },
        ),
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 60000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
        abortSignal:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.abortSignal,
      });
      if (_response.ok) {
        return serializers.PostAccountApiV1SessionRequestResponse.parseOrThrow(
          _response.body,
          {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
          },
        );
      }
      if (_response.error.reason === "status-code") {
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.AnonApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.AnonApiTimeoutError();
        case "unknown":
          throw new errors.AnonApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   * List all the app user sessions you have access to. Optionally filter by a specific user.
   *
   * @param {AnonApi.ListSessionsRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.listSessions({
   *         appUserId: "string"
   *     })
   */
  listSessions(request = {}, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const { appUserId } = request;
      const _queryParams = {};
      if (appUserId != null) {
        _queryParams["appUserId"] = appUserId;
      }
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.AnonApiEnvironment.Sandbox,
          "/account/api/v1/sessions",
        ),
        method: "GET",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Anon-Sdk-Client-Id": yield core.Supplier.get(
            this._options.anonSdkClientId,
          ),
          "X-Fern-Language": "JavaScript",
          "X-Fern-Runtime": core.RUNTIME.type,
          "X-Fern-Runtime-Version": core.RUNTIME.version,
        },
        contentType: "application/json",
        queryParameters: _queryParams,
        requestType: "json",
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 60000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
        abortSignal:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.abortSignal,
      });
      if (_response.ok) {
        return serializers.ListSessionsResponse.parseOrThrow(_response.body, {
          unrecognizedObjectKeys: "passthrough",
          allowUnrecognizedUnionMembers: true,
          allowUnrecognizedEnumValues: true,
          breadcrumbsPrefix: ["response"],
        });
      }
      if (_response.error.reason === "status-code") {
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.AnonApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.AnonApiTimeoutError();
        case "unknown":
          throw new errors.AnonApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   * @param {AnonApi.PostAccountApiV1SessionAccessGrantRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.addSessionAccessGrant({
   *         sessionId: "string",
   *         appUserId: "string"
   *     })
   */
  addSessionAccessGrant(request, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.AnonApiEnvironment.Sandbox,
          "/account/api/v1/sessionAccessGrant",
        ),
        method: "POST",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Anon-Sdk-Client-Id": yield core.Supplier.get(
            this._options.anonSdkClientId,
          ),
          "X-Fern-Language": "JavaScript",
          "X-Fern-Runtime": core.RUNTIME.type,
          "X-Fern-Runtime-Version": core.RUNTIME.version,
        },
        contentType: "application/json",
        requestType: "json",
        body: serializers.PostAccountApiV1SessionAccessGrantRequest.jsonOrThrow(
          request,
          {
            unrecognizedObjectKeys: "strip",
          },
        ),
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 60000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
        abortSignal:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.abortSignal,
      });
      if (_response.ok) {
        return serializers.PostAccountApiV1SessionAccessGrantResponse.parseOrThrow(
          _response.body,
          {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
          },
        );
      }
      if (_response.error.reason === "status-code") {
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.AnonApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.AnonApiTimeoutError();
        case "unknown":
          throw new errors.AnonApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   * @param {AnonApi.DeleteAccountApiV1SessionAccessGrantRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.deleteSessionAccessGrant({
   *         sessionId: "string",
   *         appUserId: "string"
   *     })
   */
  deleteSessionAccessGrant(request, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.AnonApiEnvironment.Sandbox,
          "/account/api/v1/sessionAccessGrant",
        ),
        method: "DELETE",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Anon-Sdk-Client-Id": yield core.Supplier.get(
            this._options.anonSdkClientId,
          ),
          "X-Fern-Language": "JavaScript",
          "X-Fern-Runtime": core.RUNTIME.type,
          "X-Fern-Runtime-Version": core.RUNTIME.version,
        },
        contentType: "application/json",
        requestType: "json",
        body: serializers.DeleteAccountApiV1SessionAccessGrantRequest.jsonOrThrow(
          request,
          {
            unrecognizedObjectKeys: "strip",
          },
        ),
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 60000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
        abortSignal:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.abortSignal,
      });
      if (_response.ok) {
        return serializers.DeleteAccountApiV1SessionAccessGrantResponse.parseOrThrow(
          _response.body,
          {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
          },
        );
      }
      if (_response.error.reason === "status-code") {
        throw new errors.AnonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.AnonApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.AnonApiTimeoutError();
        case "unknown":
          throw new errors.AnonApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  _getAuthorizationHeader() {
    return __awaiter(this, void 0, void 0, function* () {
      return `Bearer ${yield core.Supplier.get(this._options.token)}`;
    });
  }
}
exports.Session = Session;
