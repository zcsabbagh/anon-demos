/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as AnonApi from "../../../index";
export declare namespace Session {
  interface Options {
    environment?: core.Supplier<environments.AnonApiEnvironment | string>;
    token: core.Supplier<core.BearerToken>;
    /** Override the X-Anon-Sdk-Client-Id header */
    anonSdkClientId: core.Supplier<string>;
  }
  interface RequestOptions {
    /** The maximum time to wait for a response in seconds. */
    timeoutInSeconds?: number;
    /** The number of times to retry the request. Defaults to 2. */
    maxRetries?: number;
    /** A hook to abort the request. */
    abortSignal?: AbortSignal;
    /** Override the X-Anon-Sdk-Client-Id header */
    anonSdkClientId?: string;
  }
}
export declare class Session {
  protected readonly _options: Session.Options;
  constructor(_options: Session.Options);
  /**
   * @param {AnonApi.GetAccountApiV1AppIntegrationRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.getAppIntegration({
   *         id: "string"
   *     })
   */
  getAppIntegration(
    request: AnonApi.GetAccountApiV1AppIntegrationRequest,
    requestOptions?: Session.RequestOptions,
  ): Promise<AnonApi.GetAccountApiV1AppIntegrationResponse>;
  /**
   * @param {AnonApi.PostAccountApiV1BrowserEnvironmentRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.createRuntimeBrowserEnvironment({
   *         proxy: {
   *             server: "string",
   *             bypass: "string",
   *             username: "string",
   *             password: "string"
   *         },
   *         isLiveStreamingSession: true
   *     })
   */
  createRuntimeBrowserEnvironment(
    request?: AnonApi.PostAccountApiV1BrowserEnvironmentRequest,
    requestOptions?: Session.RequestOptions,
  ): Promise<AnonApi.PostAccountApiV1BrowserEnvironmentResponse>;
  /**
   * @param {AnonApi.GetAccountApiV1SessionRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.getSession({
   *         ownerId: "string",
   *         appUserId: "string",
   *         domain: "string"
   *     })
   */
  getSession(
    request: AnonApi.GetAccountApiV1SessionRequest,
    requestOptions?: Session.RequestOptions,
  ): Promise<AnonApi.GetAccountApiV1SessionResponse>;
  /**
   * @param {AnonApi.PostAccountApiV1SessionRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.addSession({
   *         ownerId: "string",
   *         domain: "string",
   *         session: {
   *             id: "string",
   *             status: "active",
   *             cookies: [{
   *                     name: "string",
   *                     value: "string",
   *                     domain: "string",
   *                     path: "string",
   *                     expires: 1.1,
   *                     secure: true,
   *                     hostOnly: true,
   *                     httpOnly: true,
   *                     discard: true,
   *                     session: true,
   *                     partitioned: true,
   *                     sameSite: "unspecified",
   *                     sameSitePolicy: "unspecified",
   *                     storeId: "string"
   *                 }],
   *             localStorage: [["string"]],
   *             sessionStorage: [["string"]],
   *             proxyId: "string",
   *             url: "string"
   *         }
   *     })
   */
  addSession(
    request: AnonApi.PostAccountApiV1SessionRequest,
    requestOptions?: Session.RequestOptions,
  ): Promise<AnonApi.PostAccountApiV1SessionResponse>;
  /**
   * @param {AnonApi.PutAccountApiV1SessionRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.updateSession({
   *         ownerId: "string",
   *         domain: "string",
   *         session: {
   *             id: "string",
   *             status: "active",
   *             cookies: [{
   *                     name: "string",
   *                     value: "string",
   *                     domain: "string",
   *                     path: "string",
   *                     expires: 1.1,
   *                     secure: true,
   *                     hostOnly: true,
   *                     httpOnly: true,
   *                     discard: true,
   *                     session: true,
   *                     partitioned: true,
   *                     sameSite: "unspecified",
   *                     sameSitePolicy: "unspecified",
   *                     storeId: "string"
   *                 }],
   *             localStorage: [["string"]],
   *             sessionStorage: [["string"]],
   *             proxyId: "string",
   *             url: "string"
   *         }
   *     })
   */
  updateSession(
    request: AnonApi.PutAccountApiV1SessionRequest,
    requestOptions?: Session.RequestOptions,
  ): Promise<AnonApi.PutAccountApiV1SessionResponse>;
  /**
   * Disconnect a previously connected session.
   *
   * @param {AnonApi.DeleteSessionRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.removeSession({
   *         appUserId: "string",
   *         app: "amazon"
   *     })
   */
  removeSession(
    request: AnonApi.DeleteSessionRequest,
    requestOptions?: Session.RequestOptions,
  ): Promise<AnonApi.DeleteSessionResponse>;
  /**
   * @param {AnonApi.GetAccountApiV1SessionStatusRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.getSessionStatus({
   *         appUserId: "string",
   *         app: "amazon"
   *     })
   */
  getSessionStatus(
    request: AnonApi.GetAccountApiV1SessionStatusRequest,
    requestOptions?: Session.RequestOptions,
  ): Promise<AnonApi.GetAccountApiV1SessionStatusResponse>;
  /**
   * @param {AnonApi.GetAccountApiV1SessionRequestRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.getSessionRequestStatus({
   *         id: "string"
   *     })
   */
  getSessionRequestStatus(
    request: AnonApi.GetAccountApiV1SessionRequestRequest,
    requestOptions?: Session.RequestOptions,
  ): Promise<AnonApi.GetAccountApiV1SessionRequestResponse>;
  /**
   * @param {AnonApi.PostAccountApiV1SessionRequestRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.createSessionRequest({
   *         iosPushAuthorization: {
   *             iosAppId: "string",
   *             authToken: "string"
   *         },
   *         account: {
   *             ownerId: "string",
   *             domain: "string"
   *         },
   *         appSdkClientId: "string",
   *         alertBody: "string",
   *         alertTitle: "string"
   *     })
   */
  createSessionRequest(
    request: AnonApi.PostAccountApiV1SessionRequestRequest,
    requestOptions?: Session.RequestOptions,
  ): Promise<AnonApi.PostAccountApiV1SessionRequestResponse>;
  /**
   * List all the app user sessions you have access to. Optionally filter by a specific user.
   *
   * @param {AnonApi.ListSessionsRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.listSessions({
   *         appUserId: "string"
   *     })
   */
  listSessions(
    request?: AnonApi.ListSessionsRequest,
    requestOptions?: Session.RequestOptions,
  ): Promise<AnonApi.ListSessionsResponse>;
  /**
   * @param {AnonApi.PostAccountApiV1SessionAccessGrantRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.addSessionAccessGrant({
   *         sessionId: "string",
   *         appUserId: "string"
   *     })
   */
  addSessionAccessGrant(
    request: AnonApi.PostAccountApiV1SessionAccessGrantRequest,
    requestOptions?: Session.RequestOptions,
  ): Promise<AnonApi.PostAccountApiV1SessionAccessGrantResponse>;
  /**
   * @param {AnonApi.DeleteAccountApiV1SessionAccessGrantRequest} request
   * @param {Session.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.session.deleteSessionAccessGrant({
   *         sessionId: "string",
   *         appUserId: "string"
   *     })
   */
  deleteSessionAccessGrant(
    request: AnonApi.DeleteAccountApiV1SessionAccessGrantRequest,
    requestOptions?: Session.RequestOptions,
  ): Promise<AnonApi.DeleteAccountApiV1SessionAccessGrantResponse>;
  protected _getAuthorizationHeader(): Promise<string>;
}
