/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as AnonApi from "../../../index";
export declare namespace RuntimeLog {
  interface Options {
    environment?: core.Supplier<environments.AnonApiEnvironment | string>;
    token: core.Supplier<core.BearerToken>;
    /** Override the X-Anon-Sdk-Client-Id header */
    anonSdkClientId: core.Supplier<string>;
  }
  interface RequestOptions {
    /** The maximum time to wait for a response in seconds. */
    timeoutInSeconds?: number;
    /** The number of times to retry the request. Defaults to 2. */
    maxRetries?: number;
    /** A hook to abort the request. */
    abortSignal?: AbortSignal;
    /** Override the X-Anon-Sdk-Client-Id header */
    anonSdkClientId?: string;
  }
}
export declare class RuntimeLog {
  protected readonly _options: RuntimeLog.Options;
  constructor(_options: RuntimeLog.Options);
  /**
   * @param {AnonApi.RuntimeLogCreateRequest} request
   * @param {RuntimeLog.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.runtimeLog.recordLog({
   *         environment: "local",
   *         userMetadata: {
   *             anonSessionId: "string",
   *             externalUserId: "string"
   *         },
   *         browserConfig: {
   *             browserType: "managed",
   *             proxy: {
   *                 isAnonProxyEnabled: true
   *             },
   *             browserbase: {
   *                 sessionId: "string",
   *                 sessionUrl: "string"
   *             }
   *         },
   *         app: "string",
   *         runtimeResult: {
   *             type: "success",
   *             startSdkTime: 1,
   *             startRuntimeExecutionTime: 1,
   *             endRuntimeExecutionTime: 1
   *         }
   *     })
   */
  recordLog(
    request: AnonApi.RuntimeLogCreateRequest,
    requestOptions?: RuntimeLog.RequestOptions,
  ): Promise<AnonApi.RecordLogResponse>;
  protected _getAuthorizationHeader(): Promise<string>;
}
