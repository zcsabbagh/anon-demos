import { boolean, z } from "zod";

export type RuntimeEnvironment = {
  id: string;
  ownerId: string;
  environment: {
    connectUrl: string;
    liveStreamingSession?: string;
    managedBrowserSessionId: string;
  };
};

export const LocalProxyConfigSchema = z.object({
  /**
   * Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or
   * `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.
   */
  server: z.string(),

  /**
   * Optional comma-separated domains to bypass proxy, for example `".com, chromium.org, .domain.com"`.
   */
  bypass: z.string().optional(),

  /**
   * Optional username to use if HTTP proxy requires authentication.
   */
  username: z.string().optional(),

  /**
   * Optional password to use if HTTP proxy requires authentication.
   */
  password: z.string().optional(),
});

export type LocalProxyConfig = z.infer<typeof LocalProxyConfigSchema>;

export const CreateManagedAnonEnvironmentRequestSchema = z
  .object({
    proxy: LocalProxyConfigSchema.optional(),
    isLiveStreamingSession: z.boolean().optional(),
  })
  .nullable();

export type CreateManagedAnonEnvironmentRequest = z.infer<
  typeof CreateManagedAnonEnvironmentRequestSchema
>;

export type CreateManagedAnonEnvironmentResponse = {
  connectUrl: string;
  liveSessionUrl?: string;
  managedBrowserSessionId: string;
};
