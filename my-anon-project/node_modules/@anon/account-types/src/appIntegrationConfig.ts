import { z } from "zod";

export const StorageTypeSchema = z.enum(["local", "session", "cookie"]);

export const BaseIndicatorSchema = z.object({
  key: z.string(),
});

export const LocalOrSessionIndicatorSchema = BaseIndicatorSchema.merge(
  z.object({
    storage: z.enum(["local", "session"]),
  }),
);

export const CookieIndicatorSchema = BaseIndicatorSchema.merge(
  z.object({
    storage: z.literal("cookie"),
    domains: z.array(z.string()),
    validator: z
      .object({
        kind: z.literal("jwt_claim"),
        value: z.string(),
      })
      .optional(),
  }),
);

export const SessionCompletionIndicatorSchema =
  LocalOrSessionIndicatorSchema.or(CookieIndicatorSchema);

export type StorageType = z.infer<typeof StorageTypeSchema>;
export type LocalOrSessionIndicator = z.infer<
  typeof LocalOrSessionIndicatorSchema
>;
export type CookieIndicator = z.infer<typeof CookieIndicatorSchema>;
export type SessionCompletionIndicator = z.infer<
  typeof SessionCompletionIndicatorSchema
>;

// Specifies the conditions to check on a webpage to determine session validity.
export type WebValidationCriteria = {
  selector: string; // CSS selector for the element to check
  exists: boolean; // Should the element exist or not
};

// Defines the rule for matching the validation criteria.
export enum WebValidationMatchRule {
  ALL = "ALL", // All criteria must be met for the session to be considered valid
  ANY = "ANY", // Any of the criteria can be met for the session to be considered valid
}

// Structured validation check for a web session based on specified URL and criteria.
export type WebSessionValidationCheck = {
  url: string; // URL for the validity check
  criteria: Array<WebValidationCriteria>;
  matchRule: WebValidationMatchRule; // Updated to reflect the specific use case
};

// A request format for session validation purposes.
export type SessionValidationRequest = {
  app: string;
  authUrl: string;
  completionIndicators: Array<SessionCompletionIndicator>;
};

// Configuration for a app indicating how sessions should be validated.
export type AppIntegrationConfig = {
  authUrl: string;
  displayName: string;
  iconUrl: string;
  domCompletionIndicator?: string;
  completionIndicators: SessionValidationRequest["completionIndicators"];
  sessionExtractionDomains: Array<{
    domain: string;
  }>;
  sessionValidation: {
    sessionValidityChecks: Array<WebSessionValidationCheck>;
  };
  experimental?: boolean;
};
