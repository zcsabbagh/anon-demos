import { z } from "zod";

import {
  AppIntegrationConfig,
  SessionCompletionIndicatorSchema,
} from "./appIntegrationConfig.js";
import { RuntimeEnvironment } from "./runtimeEnvironment.js";
import { TypedResponse } from "./typedResponse.js";

// https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/cookies/SameSiteStatus
// Lowercase enum variants are for chrome, which brings along the additional `unspecified` and `no_restriction`
// variants, whereas iOS/webkit uses `null` values and capitalized variants. Thus `Unspecified` and `No_Restriction`
// do not exist since chrome does not use them and they both map to the `null` variant (which may be interpreted
// in different ways by different browsers)
export const SameSitePolicySchema = z.enum([
  "unspecified",
  "no_restriction",
  "Lax",
  "lax",
  "Strict",
  "strict",
  "None",
  "none",
]);

// Copied from https://github.com/microsoft/playwright/blob/810382c074fb94ba2ac3f2b399a463d96dc3ef1f/packages/playwright-core/types/types.d.ts#L20069
export const CookieSchema = z.object({
  name: z.string(),
  value: z.string(),
  domain: z.string(),
  path: z.string(),
  // Unix time in seconds
  expires: z.number().optional(),
  secure: z.boolean(),
  // Keys that are different between browsers
  hostOnly: z.boolean().optional(),
  httpOnly: z.boolean().optional(),
  discard: z.boolean().optional(),
  session: z.boolean().optional(),
  partitioned: z.boolean().optional(),
  sameSite: SameSitePolicySchema.optional(),
  sameSitePolicy: SameSitePolicySchema.optional(),
  storeId: z.string().optional(),
});

export const BrowserStorageSchema = z.array(z.array(z.string()));

export const SessionIdSchema = z.string();
export const SessionStatusSchema = z.enum(["active", "revoked", "unknown"]);

export const SessionSchema = z.object({
  // allow id and status to not be included in return type of services
  id: z.string().optional(),
  status: SessionStatusSchema.optional(),
  cookies: z.array(CookieSchema),
  localStorage: BrowserStorageSchema,
  sessionStorage: BrowserStorageSchema,
  // Proxy Id generated from proxy service
  proxyId: z.string().optional(),
  url: z.string(),
});

// FIXME (kai) this is a redefinition of from org-types
// which should be removed.
// THIS WILL CREATE PROBLEMS
// NEED A TICKET TO TRACK THIS
export const SessionAccessGrantSchema = z.object({
  id: z.string(),
  role: z.enum(["admin", "reader", "writer"]),
  sessionId: z.string(),
  subjectId: z.string(),
  subjectKind: z.enum(["sdkClientKind", "user"]),
});

export const SessionDataSchema = z.object({
  ownerId: z.string().optional(),
  domain: z.string(),
  session: SessionSchema,
});

export const SessionRequestSchema = z.object({
  app: z.string(),
  authUrl: z.string(),
  completionIndicators: z.array(SessionCompletionIndicatorSchema),
});

export const SessionAppUserSchema = z.object({
  id: z.string().optional(),
  anonId: z.string(),
  email: z.string().optional(),
});

export const SessionMetadataSchema = z.object({
  app: z.string(),
  sessionId: z.string(),
  appUser: SessionAppUserSchema,
  // TODO(kai) implement these fields
  // status: SessionStatusSchema,
  // createdAt: z.date()
  // updatedAt: z.date()
});

export const SessionListResponseSchema = z.object({
  sessions: z.array(SessionMetadataSchema),
});

export const CreateSessionAccessGrantRequestSchema = z.object({
  sessionId: z.string(),
  appUserId: z.string(),
});

export const DeleteSessionAccessGrantRequestSchema = z.object({
  sessionId: z.string(),
  appUserId: z.string(),
});

export type SameSitePolicy = z.infer<typeof SameSitePolicySchema>;
export type Cookie = z.infer<typeof CookieSchema>;
export type SessionId = z.infer<typeof SessionIdSchema>;
export type SessionStatus = z.infer<typeof SessionStatusSchema>;
export type Session = z.infer<typeof SessionSchema>;
export type SessionAccessGrant = z.infer<typeof SessionAccessGrantSchema>;
export type SessionData = z.infer<typeof SessionDataSchema>;
export type SessionRequest = z.infer<typeof SessionRequestSchema>;

/**
 * Hono typed response format.
 */
export type KnownResponseFormat = "json" | "text";
export type ResponseFormat = KnownResponseFormat | string;

export type GetAppIntegrationResponse = Response &
  TypedResponse<
    | {
        message: string;
      }
    | {
        app: AppIntegrationConfig;
      }
  >;

export type ListAppIntegrationsResponse = Response &
  TypedResponse<{
    apps: (
      | (Pick<
          AppIntegrationConfig,
          "displayName" | "iconUrl" | "experimental"
        > & { domains: string[] })
      | { id: string }
    )[];
  }>;

export type CreateRuntimeBrowserEnvironmentResponse = Response &
  TypedResponse<
    | {
        message: string;
      }
    | RuntimeEnvironment
  >;

export type AddSessionResponse =
  | (Response &
      TypedResponse<
        | {
            message: string;
          }
        | {
            message: string;
            ownerId: string;
            domain: string;
          }
      >)
  | HandleGetSessionResponse;

export type UpdateSessionResponse =
  | (Response &
      TypedResponse<
        | {
            message: string;
          }
        | {
            message: string;
            ownerId: string;
            domain: string;
          }
      >)
  | HandleGetSessionResponse;

export type HandleSessionError = Response &
  TypedResponse<{
    message: string;
  }>;

export type SessionResponse = Response &
  TypedResponse<
    | {
        message: string;
      }
    | {
        message: string;
        status: "pending";
        requestId: string;
      }
  >;

export type HandleGetSessionResponse = Response &
  TypedResponse<
    | {
        message: string;
      }
    | {
        status?: string;
      }
    | {
        ownerId?: string;
        domain?: string;
        session?: Session;
      }
  >;
export type SessionRequestStatusResponse = Response &
  TypedResponse<{
    message: string;
    succeeded?: boolean;
    status?: string; // "pending" | "success" | "sent" | "failed" | "unknown";
    details?: object;
  }>;

export type ListSessionsResponse =
  | (Response &
      TypedResponse<
        | {
            message: string;
          }
        | {
            sessions: SessionData[];
          }
      >)
  | HandleGetSessionResponse;

export type RemoveSessionResponse =
  | (Response &
      TypedResponse<{
        ownerId: string;
        domain: string;
      }>)
  | HandleSessionError;

export type PingResponse = Response & TypedResponse<string>;

export type HealthzResponse = Response & TypedResponse<string>;
export type SessionMetadata = z.infer<typeof SessionMetadataSchema>;
export type SessionAppUser = z.infer<typeof SessionAppUserSchema>;
export type SessionListResponse = z.infer<typeof SessionListResponseSchema>;
export type CreateSessionAccessGrantRequest = z.infer<
  typeof CreateSessionAccessGrantRequestSchema
>;
export type DeleteSessionAccessGrantRequest = z.infer<
  typeof DeleteSessionAccessGrantRequestSchema
>;
