import { z } from "zod";
export declare const StorageTypeSchema: z.ZodEnum<["local", "session", "cookie"]>;
export declare const BaseIndicatorSchema: z.ZodObject<{
    key: z.ZodString;
}, "strip", z.ZodTypeAny, {
    key: string;
}, {
    key: string;
}>;
export declare const LocalOrSessionIndicatorSchema: z.ZodObject<{
    key: z.ZodString;
    storage: z.ZodEnum<["local", "session"]>;
}, "strip", z.ZodTypeAny, {
    key: string;
    storage: "session" | "local";
}, {
    key: string;
    storage: "session" | "local";
}>;
export declare const CookieIndicatorSchema: z.ZodObject<{
    key: z.ZodString;
    storage: z.ZodLiteral<"cookie">;
    domains: z.ZodArray<z.ZodString, "many">;
    validator: z.ZodOptional<z.ZodObject<{
        kind: z.ZodLiteral<"jwt_claim">;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        value: string;
        kind: "jwt_claim";
    }, {
        value: string;
        kind: "jwt_claim";
    }>>;
}, "strip", z.ZodTypeAny, {
    key: string;
    storage: "cookie";
    domains: string[];
    validator?: {
        value: string;
        kind: "jwt_claim";
    } | undefined;
}, {
    key: string;
    storage: "cookie";
    domains: string[];
    validator?: {
        value: string;
        kind: "jwt_claim";
    } | undefined;
}>;
export declare const SessionCompletionIndicatorSchema: z.ZodUnion<[z.ZodObject<{
    key: z.ZodString;
    storage: z.ZodEnum<["local", "session"]>;
}, "strip", z.ZodTypeAny, {
    key: string;
    storage: "session" | "local";
}, {
    key: string;
    storage: "session" | "local";
}>, z.ZodObject<{
    key: z.ZodString;
    storage: z.ZodLiteral<"cookie">;
    domains: z.ZodArray<z.ZodString, "many">;
    validator: z.ZodOptional<z.ZodObject<{
        kind: z.ZodLiteral<"jwt_claim">;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        value: string;
        kind: "jwt_claim";
    }, {
        value: string;
        kind: "jwt_claim";
    }>>;
}, "strip", z.ZodTypeAny, {
    key: string;
    storage: "cookie";
    domains: string[];
    validator?: {
        value: string;
        kind: "jwt_claim";
    } | undefined;
}, {
    key: string;
    storage: "cookie";
    domains: string[];
    validator?: {
        value: string;
        kind: "jwt_claim";
    } | undefined;
}>]>;
export type StorageType = z.infer<typeof StorageTypeSchema>;
export type LocalOrSessionIndicator = z.infer<typeof LocalOrSessionIndicatorSchema>;
export type CookieIndicator = z.infer<typeof CookieIndicatorSchema>;
export type SessionCompletionIndicator = z.infer<typeof SessionCompletionIndicatorSchema>;
export type WebValidationCriteria = {
    selector: string;
    exists: boolean;
};
export declare enum WebValidationMatchRule {
    ALL = "ALL",
    ANY = "ANY"
}
export type WebSessionValidationCheck = {
    url: string;
    criteria: Array<WebValidationCriteria>;
    matchRule: WebValidationMatchRule;
};
export type SessionValidationRequest = {
    app: string;
    authUrl: string;
    completionIndicators: Array<SessionCompletionIndicator>;
};
export type AppIntegrationConfig = {
    authUrl: string;
    displayName: string;
    iconUrl: string;
    domCompletionIndicator?: string;
    completionIndicators: SessionValidationRequest["completionIndicators"];
    sessionExtractionDomains: Array<{
        domain: string;
    }>;
    sessionValidation: {
        sessionValidityChecks: Array<WebSessionValidationCheck>;
    };
    experimental?: boolean;
};
