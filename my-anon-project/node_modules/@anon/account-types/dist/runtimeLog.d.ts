import { z } from "zod";
import { TypedResponse } from "./typedResponse";
declare const AnonEnvironmentSchema: z.ZodEnum<["local", "development", "staging", "sandbox", "prod"]>;
export type AnonEnvironment = z.infer<typeof AnonEnvironmentSchema>;
declare const LocalBrowserConfigSchema: z.ZodObject<{
    browserType: z.ZodLiteral<"local">;
    isHeadless: z.ZodOptional<z.ZodBoolean>;
    proxy: z.ZodOptional<z.ZodObject<{
        isAnonProxyEnabled: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        isAnonProxyEnabled: boolean;
    }, {
        isAnonProxyEnabled: boolean;
    }>>;
}, "strip", z.ZodTypeAny, {
    browserType: "local";
    isHeadless?: boolean | undefined;
    proxy?: {
        isAnonProxyEnabled: boolean;
    } | undefined;
}, {
    browserType: "local";
    isHeadless?: boolean | undefined;
    proxy?: {
        isAnonProxyEnabled: boolean;
    } | undefined;
}>;
export type LocalBrowserConfig = z.infer<typeof LocalBrowserConfigSchema>;
declare const BrowserbaseSessionSchema: z.ZodObject<{
    sessionId: z.ZodString;
    sessionUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    sessionId: string;
    sessionUrl?: string | undefined;
}, {
    sessionId: string;
    sessionUrl?: string | undefined;
}>;
export type BrowserbaseSession = z.infer<typeof BrowserbaseSessionSchema>;
declare const ManagedBrowserConfigSchema: z.ZodObject<{
    browserType: z.ZodLiteral<"managed">;
    proxy: z.ZodOptional<z.ZodObject<{
        isAnonProxyEnabled: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        isAnonProxyEnabled: boolean;
    }, {
        isAnonProxyEnabled: boolean;
    }>>;
    browserbase: z.ZodOptional<z.ZodObject<{
        sessionId: z.ZodString;
        sessionUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        sessionId: string;
        sessionUrl?: string | undefined;
    }, {
        sessionId: string;
        sessionUrl?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    browserType: "managed";
    proxy?: {
        isAnonProxyEnabled: boolean;
    } | undefined;
    browserbase?: {
        sessionId: string;
        sessionUrl?: string | undefined;
    } | undefined;
}, {
    browserType: "managed";
    proxy?: {
        isAnonProxyEnabled: boolean;
    } | undefined;
    browserbase?: {
        sessionId: string;
        sessionUrl?: string | undefined;
    } | undefined;
}>;
export type ManagedBrowserConfig = z.infer<typeof ManagedBrowserConfigSchema>;
declare const RemoteBrowserConfigSchema: z.ZodObject<{
    browserType: z.ZodLiteral<"remote">;
}, "strip", z.ZodTypeAny, {
    browserType: "remote";
}, {
    browserType: "remote";
}>;
export type RemoteBrowserConfig = z.infer<typeof RemoteBrowserConfigSchema>;
declare const InferredRuntimeBrowserConfigSchema: z.ZodObject<{
    browserType: z.ZodLiteral<"inferred">;
    proxy: z.ZodOptional<z.ZodObject<{
        ip: z.ZodString;
        username: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        ip: string;
        username?: string | undefined;
    }, {
        ip: string;
        username?: string | undefined;
    }>>;
    connectionUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    browserType: "inferred";
    proxy?: {
        ip: string;
        username?: string | undefined;
    } | undefined;
    connectionUrl?: string | undefined;
}, {
    browserType: "inferred";
    proxy?: {
        ip: string;
        username?: string | undefined;
    } | undefined;
    connectionUrl?: string | undefined;
}>;
export type InferredRuntimeBrowserConfig = z.infer<typeof InferredRuntimeBrowserConfigSchema>;
declare const RuntimeResultSchema: z.ZodUnion<[z.ZodObject<{
    startSdkTime: z.ZodNumber;
    type: z.ZodLiteral<"success">;
    startRuntimeExecutionTime: z.ZodNumber;
    endRuntimeExecutionTime: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    type: "success";
    startSdkTime: number;
    startRuntimeExecutionTime: number;
    endRuntimeExecutionTime: number;
}, {
    type: "success";
    startSdkTime: number;
    startRuntimeExecutionTime: number;
    endRuntimeExecutionTime: number;
}>, z.ZodObject<{
    startSdkTime: z.ZodNumber;
    type: z.ZodLiteral<"error">;
    classification: z.ZodLiteral<"failedToInjectSession">;
    error: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "error";
    error: string;
    startSdkTime: number;
    classification: "failedToInjectSession";
}, {
    type: "error";
    error: string;
    startSdkTime: number;
    classification: "failedToInjectSession";
}>, z.ZodObject<{
    error: z.ZodString;
    startSdkTime: z.ZodNumber;
    type: z.ZodLiteral<"error">;
    classification: z.ZodLiteral<"runtimePlaywrightError">;
    startRuntimeExecutionTime: z.ZodNumber;
    endRuntimeExecutionTime: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    type: "error";
    error: string;
    startSdkTime: number;
    startRuntimeExecutionTime: number;
    endRuntimeExecutionTime: number;
    classification: "runtimePlaywrightError";
}, {
    type: "error";
    error: string;
    startSdkTime: number;
    startRuntimeExecutionTime: number;
    endRuntimeExecutionTime: number;
    classification: "runtimePlaywrightError";
}>, z.ZodObject<{
    error: z.ZodString;
    startSdkTime: z.ZodNumber;
    type: z.ZodLiteral<"error">;
    classification: z.ZodLiteral<"other">;
    startRuntimeExecutionTime: z.ZodOptional<z.ZodNumber>;
    endRuntimeExecutionTime: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "error";
    error: string;
    startSdkTime: number;
    classification: "other";
    startRuntimeExecutionTime?: number | undefined;
    endRuntimeExecutionTime?: number | undefined;
}, {
    type: "error";
    error: string;
    startSdkTime: number;
    classification: "other";
    startRuntimeExecutionTime?: number | undefined;
    endRuntimeExecutionTime?: number | undefined;
}>]>;
export type RuntimeResult = z.infer<typeof RuntimeResultSchema>;
declare const UserMetadataSchema: z.ZodObject<{
    anonSessionId: z.ZodString;
    anonUserId: z.ZodString;
    externalUserId: z.ZodString;
    orgId: z.ZodString;
    orgName: z.ZodString;
    sdkClientId: z.ZodString;
    sdkClientName: z.ZodString;
    sessionCollectionTime: z.ZodOptional<z.ZodDate>;
}, "strip", z.ZodTypeAny, {
    anonSessionId: string;
    anonUserId: string;
    externalUserId: string;
    orgId: string;
    orgName: string;
    sdkClientId: string;
    sdkClientName: string;
    sessionCollectionTime?: Date | undefined;
}, {
    anonSessionId: string;
    anonUserId: string;
    externalUserId: string;
    orgId: string;
    orgName: string;
    sdkClientId: string;
    sdkClientName: string;
    sessionCollectionTime?: Date | undefined;
}>;
export type UserMetadata = z.infer<typeof UserMetadataSchema>;
declare const CreateUserMetadataSchema: z.ZodObject<{
    anonSessionId: z.ZodString;
    externalUserId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    anonSessionId: string;
    externalUserId: string;
}, {
    anonSessionId: string;
    externalUserId: string;
}>;
export type CreateUserMetadata = z.infer<typeof CreateUserMetadataSchema>;
declare const RuntimeLogSchema: z.ZodObject<{
    environment: z.ZodEnum<["local", "development", "staging", "sandbox", "prod"]>;
    userMetadata: z.ZodObject<{
        anonSessionId: z.ZodString;
        anonUserId: z.ZodString;
        externalUserId: z.ZodString;
        orgId: z.ZodString;
        orgName: z.ZodString;
        sdkClientId: z.ZodString;
        sdkClientName: z.ZodString;
        sessionCollectionTime: z.ZodOptional<z.ZodDate>;
    }, "strip", z.ZodTypeAny, {
        anonSessionId: string;
        anonUserId: string;
        externalUserId: string;
        orgId: string;
        orgName: string;
        sdkClientId: string;
        sdkClientName: string;
        sessionCollectionTime?: Date | undefined;
    }, {
        anonSessionId: string;
        anonUserId: string;
        externalUserId: string;
        orgId: string;
        orgName: string;
        sdkClientId: string;
        sdkClientName: string;
        sessionCollectionTime?: Date | undefined;
    }>;
    browserConfig: z.ZodDiscriminatedUnion<"browserType", [z.ZodObject<{
        browserType: z.ZodLiteral<"managed">;
        proxy: z.ZodOptional<z.ZodObject<{
            isAnonProxyEnabled: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            isAnonProxyEnabled: boolean;
        }, {
            isAnonProxyEnabled: boolean;
        }>>;
        browserbase: z.ZodOptional<z.ZodObject<{
            sessionId: z.ZodString;
            sessionUrl: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            sessionId: string;
            sessionUrl?: string | undefined;
        }, {
            sessionId: string;
            sessionUrl?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        browserType: "managed";
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
        browserbase?: {
            sessionId: string;
            sessionUrl?: string | undefined;
        } | undefined;
    }, {
        browserType: "managed";
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
        browserbase?: {
            sessionId: string;
            sessionUrl?: string | undefined;
        } | undefined;
    }>, z.ZodObject<{
        browserType: z.ZodLiteral<"local">;
        isHeadless: z.ZodOptional<z.ZodBoolean>;
        proxy: z.ZodOptional<z.ZodObject<{
            isAnonProxyEnabled: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            isAnonProxyEnabled: boolean;
        }, {
            isAnonProxyEnabled: boolean;
        }>>;
    }, "strip", z.ZodTypeAny, {
        browserType: "local";
        isHeadless?: boolean | undefined;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
    }, {
        browserType: "local";
        isHeadless?: boolean | undefined;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
    }>, z.ZodObject<{
        browserType: z.ZodLiteral<"remote">;
    }, "strip", z.ZodTypeAny, {
        browserType: "remote";
    }, {
        browserType: "remote";
    }>]>;
    app: z.ZodString;
    runtimeResult: z.ZodUnion<[z.ZodObject<{
        startSdkTime: z.ZodNumber;
        type: z.ZodLiteral<"success">;
        startRuntimeExecutionTime: z.ZodNumber;
        endRuntimeExecutionTime: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "success";
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
    }, {
        type: "success";
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
    }>, z.ZodObject<{
        startSdkTime: z.ZodNumber;
        type: z.ZodLiteral<"error">;
        classification: z.ZodLiteral<"failedToInjectSession">;
        error: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "error";
        error: string;
        startSdkTime: number;
        classification: "failedToInjectSession";
    }, {
        type: "error";
        error: string;
        startSdkTime: number;
        classification: "failedToInjectSession";
    }>, z.ZodObject<{
        error: z.ZodString;
        startSdkTime: z.ZodNumber;
        type: z.ZodLiteral<"error">;
        classification: z.ZodLiteral<"runtimePlaywrightError">;
        startRuntimeExecutionTime: z.ZodNumber;
        endRuntimeExecutionTime: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "error";
        error: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
        classification: "runtimePlaywrightError";
    }, {
        type: "error";
        error: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
        classification: "runtimePlaywrightError";
    }>, z.ZodObject<{
        error: z.ZodString;
        startSdkTime: z.ZodNumber;
        type: z.ZodLiteral<"error">;
        classification: z.ZodLiteral<"other">;
        startRuntimeExecutionTime: z.ZodOptional<z.ZodNumber>;
        endRuntimeExecutionTime: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "error";
        error: string;
        startSdkTime: number;
        classification: "other";
        startRuntimeExecutionTime?: number | undefined;
        endRuntimeExecutionTime?: number | undefined;
    }, {
        type: "error";
        error: string;
        startSdkTime: number;
        classification: "other";
        startRuntimeExecutionTime?: number | undefined;
        endRuntimeExecutionTime?: number | undefined;
    }>]>;
}, "strip", z.ZodTypeAny, {
    environment: "local" | "development" | "staging" | "sandbox" | "prod";
    app: string;
    userMetadata: {
        anonSessionId: string;
        anonUserId: string;
        externalUserId: string;
        orgId: string;
        orgName: string;
        sdkClientId: string;
        sdkClientName: string;
        sessionCollectionTime?: Date | undefined;
    };
    browserConfig: {
        browserType: "local";
        isHeadless?: boolean | undefined;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
    } | {
        browserType: "managed";
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
        browserbase?: {
            sessionId: string;
            sessionUrl?: string | undefined;
        } | undefined;
    } | {
        browserType: "remote";
    };
    runtimeResult: {
        type: "success";
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
    } | {
        type: "error";
        error: string;
        startSdkTime: number;
        classification: "failedToInjectSession";
    } | {
        type: "error";
        error: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
        classification: "runtimePlaywrightError";
    } | {
        type: "error";
        error: string;
        startSdkTime: number;
        classification: "other";
        startRuntimeExecutionTime?: number | undefined;
        endRuntimeExecutionTime?: number | undefined;
    };
}, {
    environment: "local" | "development" | "staging" | "sandbox" | "prod";
    app: string;
    userMetadata: {
        anonSessionId: string;
        anonUserId: string;
        externalUserId: string;
        orgId: string;
        orgName: string;
        sdkClientId: string;
        sdkClientName: string;
        sessionCollectionTime?: Date | undefined;
    };
    browserConfig: {
        browserType: "local";
        isHeadless?: boolean | undefined;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
    } | {
        browserType: "managed";
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
        browserbase?: {
            sessionId: string;
            sessionUrl?: string | undefined;
        } | undefined;
    } | {
        browserType: "remote";
    };
    runtimeResult: {
        type: "success";
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
    } | {
        type: "error";
        error: string;
        startSdkTime: number;
        classification: "failedToInjectSession";
    } | {
        type: "error";
        error: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
        classification: "runtimePlaywrightError";
    } | {
        type: "error";
        error: string;
        startSdkTime: number;
        classification: "other";
        startRuntimeExecutionTime?: number | undefined;
        endRuntimeExecutionTime?: number | undefined;
    };
}>;
export type RuntimeLog = z.infer<typeof RuntimeLogSchema>;
/**
 * Schema to create a new runtime logs record. There are subtle difference in this creation payload over the
 * RuntimeLogSchema. Namely, it's meant to make creation easier and infer data for the RuntimeLog on th server side
 */
export declare const RuntimeLogCreateRequestSchema: z.ZodObject<{
    environment: z.ZodEnum<["local", "development", "staging", "sandbox", "prod"]>;
    userMetadata: z.ZodObject<{
        anonSessionId: z.ZodString;
        externalUserId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        anonSessionId: string;
        externalUserId: string;
    }, {
        anonSessionId: string;
        externalUserId: string;
    }>;
    browserConfig: z.ZodDiscriminatedUnion<"browserType", [z.ZodObject<{
        browserType: z.ZodLiteral<"managed">;
        proxy: z.ZodOptional<z.ZodObject<{
            isAnonProxyEnabled: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            isAnonProxyEnabled: boolean;
        }, {
            isAnonProxyEnabled: boolean;
        }>>;
        browserbase: z.ZodOptional<z.ZodObject<{
            sessionId: z.ZodString;
            sessionUrl: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            sessionId: string;
            sessionUrl?: string | undefined;
        }, {
            sessionId: string;
            sessionUrl?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        browserType: "managed";
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
        browserbase?: {
            sessionId: string;
            sessionUrl?: string | undefined;
        } | undefined;
    }, {
        browserType: "managed";
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
        browserbase?: {
            sessionId: string;
            sessionUrl?: string | undefined;
        } | undefined;
    }>, z.ZodObject<{
        browserType: z.ZodLiteral<"local">;
        isHeadless: z.ZodOptional<z.ZodBoolean>;
        proxy: z.ZodOptional<z.ZodObject<{
            isAnonProxyEnabled: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            isAnonProxyEnabled: boolean;
        }, {
            isAnonProxyEnabled: boolean;
        }>>;
    }, "strip", z.ZodTypeAny, {
        browserType: "local";
        isHeadless?: boolean | undefined;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
    }, {
        browserType: "local";
        isHeadless?: boolean | undefined;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
    }>, z.ZodObject<{
        browserType: z.ZodLiteral<"remote">;
    }, "strip", z.ZodTypeAny, {
        browserType: "remote";
    }, {
        browserType: "remote";
    }>, z.ZodObject<{
        browserType: z.ZodLiteral<"inferred">;
        proxy: z.ZodOptional<z.ZodObject<{
            ip: z.ZodString;
            username: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            ip: string;
            username?: string | undefined;
        }, {
            ip: string;
            username?: string | undefined;
        }>>;
        connectionUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        browserType: "inferred";
        proxy?: {
            ip: string;
            username?: string | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
    }, {
        browserType: "inferred";
        proxy?: {
            ip: string;
            username?: string | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
    }>]>;
    app: z.ZodString;
    runtimeResult: z.ZodUnion<[z.ZodObject<{
        startSdkTime: z.ZodNumber;
        type: z.ZodLiteral<"success">;
        startRuntimeExecutionTime: z.ZodNumber;
        endRuntimeExecutionTime: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "success";
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
    }, {
        type: "success";
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
    }>, z.ZodObject<{
        startSdkTime: z.ZodNumber;
        type: z.ZodLiteral<"error">;
        classification: z.ZodLiteral<"failedToInjectSession">;
        error: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "error";
        error: string;
        startSdkTime: number;
        classification: "failedToInjectSession";
    }, {
        type: "error";
        error: string;
        startSdkTime: number;
        classification: "failedToInjectSession";
    }>, z.ZodObject<{
        error: z.ZodString;
        startSdkTime: z.ZodNumber;
        type: z.ZodLiteral<"error">;
        classification: z.ZodLiteral<"runtimePlaywrightError">;
        startRuntimeExecutionTime: z.ZodNumber;
        endRuntimeExecutionTime: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "error";
        error: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
        classification: "runtimePlaywrightError";
    }, {
        type: "error";
        error: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
        classification: "runtimePlaywrightError";
    }>, z.ZodObject<{
        error: z.ZodString;
        startSdkTime: z.ZodNumber;
        type: z.ZodLiteral<"error">;
        classification: z.ZodLiteral<"other">;
        startRuntimeExecutionTime: z.ZodOptional<z.ZodNumber>;
        endRuntimeExecutionTime: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "error";
        error: string;
        startSdkTime: number;
        classification: "other";
        startRuntimeExecutionTime?: number | undefined;
        endRuntimeExecutionTime?: number | undefined;
    }, {
        type: "error";
        error: string;
        startSdkTime: number;
        classification: "other";
        startRuntimeExecutionTime?: number | undefined;
        endRuntimeExecutionTime?: number | undefined;
    }>]>;
}, "strip", z.ZodTypeAny, {
    environment: "local" | "development" | "staging" | "sandbox" | "prod";
    app: string;
    userMetadata: {
        anonSessionId: string;
        externalUserId: string;
    };
    browserConfig: {
        browserType: "local";
        isHeadless?: boolean | undefined;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
    } | {
        browserType: "managed";
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
        browserbase?: {
            sessionId: string;
            sessionUrl?: string | undefined;
        } | undefined;
    } | {
        browserType: "remote";
    } | {
        browserType: "inferred";
        proxy?: {
            ip: string;
            username?: string | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
    };
    runtimeResult: {
        type: "success";
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
    } | {
        type: "error";
        error: string;
        startSdkTime: number;
        classification: "failedToInjectSession";
    } | {
        type: "error";
        error: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
        classification: "runtimePlaywrightError";
    } | {
        type: "error";
        error: string;
        startSdkTime: number;
        classification: "other";
        startRuntimeExecutionTime?: number | undefined;
        endRuntimeExecutionTime?: number | undefined;
    };
}, {
    environment: "local" | "development" | "staging" | "sandbox" | "prod";
    app: string;
    userMetadata: {
        anonSessionId: string;
        externalUserId: string;
    };
    browserConfig: {
        browserType: "local";
        isHeadless?: boolean | undefined;
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
    } | {
        browserType: "managed";
        proxy?: {
            isAnonProxyEnabled: boolean;
        } | undefined;
        browserbase?: {
            sessionId: string;
            sessionUrl?: string | undefined;
        } | undefined;
    } | {
        browserType: "remote";
    } | {
        browserType: "inferred";
        proxy?: {
            ip: string;
            username?: string | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
    };
    runtimeResult: {
        type: "success";
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
    } | {
        type: "error";
        error: string;
        startSdkTime: number;
        classification: "failedToInjectSession";
    } | {
        type: "error";
        error: string;
        startSdkTime: number;
        startRuntimeExecutionTime: number;
        endRuntimeExecutionTime: number;
        classification: "runtimePlaywrightError";
    } | {
        type: "error";
        error: string;
        startSdkTime: number;
        classification: "other";
        startRuntimeExecutionTime?: number | undefined;
        endRuntimeExecutionTime?: number | undefined;
    };
}>;
export type RuntimeLogCreateRequest = z.infer<typeof RuntimeLogCreateRequestSchema>;
export { AnonEnvironmentSchema, LocalBrowserConfigSchema, ManagedBrowserConfigSchema, RemoteBrowserConfigSchema, RuntimeResultSchema, UserMetadataSchema, RuntimeLogSchema, };
export type RecordLogResponse = Response & TypedResponse<{
    message: string;
    recordedAt?: string;
}>;
