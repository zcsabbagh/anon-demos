import { z } from "zod";
import { SessionCompletionIndicatorSchema, } from "./appIntegrationConfig.js";
// https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/cookies/SameSiteStatus
// Lowercase enum variants are for chrome, which brings along the additional `unspecified` and `no_restriction`
// variants, whereas iOS/webkit uses `null` values and capitalized variants. Thus `Unspecified` and `No_Restriction`
// do not exist since chrome does not use them and they both map to the `null` variant (which may be interpreted
// in different ways by different browsers)
export const SameSitePolicySchema = z.enum([
    "unspecified",
    "no_restriction",
    "Lax",
    "lax",
    "Strict",
    "strict",
    "None",
    "none",
]);
// Copied from https://github.com/microsoft/playwright/blob/810382c074fb94ba2ac3f2b399a463d96dc3ef1f/packages/playwright-core/types/types.d.ts#L20069
export const CookieSchema = z.object({
    name: z.string(),
    value: z.string(),
    domain: z.string(),
    path: z.string(),
    // Unix time in seconds
    expires: z.number().optional(),
    secure: z.boolean(),
    // Keys that are different between browsers
    hostOnly: z.boolean().optional(),
    httpOnly: z.boolean().optional(),
    discard: z.boolean().optional(),
    session: z.boolean().optional(),
    partitioned: z.boolean().optional(),
    sameSite: SameSitePolicySchema.optional(),
    sameSitePolicy: SameSitePolicySchema.optional(),
    storeId: z.string().optional(),
});
export const BrowserStorageSchema = z.array(z.array(z.string()));
export const SessionIdSchema = z.string();
export const SessionStatusSchema = z.enum(["active", "revoked", "unknown"]);
export const SessionSchema = z.object({
    // allow id and status to not be included in return type of services
    id: z.string().optional(),
    status: SessionStatusSchema.optional(),
    cookies: z.array(CookieSchema),
    localStorage: BrowserStorageSchema,
    sessionStorage: BrowserStorageSchema,
    // Proxy Id generated from proxy service
    proxyId: z.string().optional(),
    url: z.string(),
});
// FIXME (kai) this is a redefinition of from org-types
// which should be removed.
// THIS WILL CREATE PROBLEMS
// NEED A TICKET TO TRACK THIS
export const SessionAccessGrantSchema = z.object({
    id: z.string(),
    role: z.enum(["admin", "reader", "writer"]),
    sessionId: z.string(),
    subjectId: z.string(),
    subjectKind: z.enum(["sdkClientKind", "user"]),
});
export const SessionDataSchema = z.object({
    ownerId: z.string().optional(),
    domain: z.string(),
    session: SessionSchema,
});
export const SessionRequestSchema = z.object({
    app: z.string(),
    authUrl: z.string(),
    completionIndicators: z.array(SessionCompletionIndicatorSchema),
});
export const SessionAppUserSchema = z.object({
    id: z.string().optional(),
    anonId: z.string(),
    email: z.string().optional(),
});
export const SessionMetadataSchema = z.object({
    app: z.string(),
    sessionId: z.string(),
    appUser: SessionAppUserSchema,
    // TODO(kai) implement these fields
    // status: SessionStatusSchema,
    // createdAt: z.date()
    // updatedAt: z.date()
});
export const SessionListResponseSchema = z.object({
    sessions: z.array(SessionMetadataSchema),
});
export const CreateSessionAccessGrantRequestSchema = z.object({
    sessionId: z.string(),
    appUserId: z.string(),
});
export const DeleteSessionAccessGrantRequestSchema = z.object({
    sessionId: z.string(),
    appUserId: z.string(),
});
