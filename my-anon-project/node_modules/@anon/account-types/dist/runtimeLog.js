import { z } from "zod";
// TODO: put this API on it's own file.
const AnonEnvironmentSchema = z.enum([
    "local",
    "development",
    "staging",
    "sandbox",
    "prod",
]);
const LocalBrowserConfigSchema = z.object({
    browserType: z.literal("local"),
    isHeadless: z.boolean().optional(),
    proxy: z
        .object({
        isAnonProxyEnabled: z.boolean(),
    })
        .optional(),
});
const BrowserbaseSessionSchema = z.object({
    sessionId: z.string(),
    sessionUrl: z.string().optional(),
});
const ManagedBrowserConfigSchema = z.object({
    browserType: z.literal("managed"),
    proxy: z
        .object({
        isAnonProxyEnabled: z.boolean(),
    })
        .optional(),
    browserbase: BrowserbaseSessionSchema.optional(),
});
const RemoteBrowserConfigSchema = z.object({
    browserType: z.literal("remote"),
});
const InferredRuntimeBrowserConfigSchema = z.object({
    browserType: z.literal("inferred"),
    proxy: z
        .object({
        ip: z.string().ip(),
        username: z.string().optional(),
    })
        .optional(),
    connectionUrl: z.string().optional(),
});
const BaseRuntimeResultSchema = z.object({
    type: z.enum(["success", "error"]),
    // Unix time in milliseconds
    startSdkTime: z.number(),
});
const SuccessRuntimeResultSchema = BaseRuntimeResultSchema.extend({
    type: z.literal("success"),
    // Unix time in milliseconds
    startRuntimeExecutionTime: z.number(),
    // Unix time in milliseconds
    endRuntimeExecutionTime: z.number(),
});
const FailedToInjectSchema = BaseRuntimeResultSchema.extend({
    type: z.literal("error"),
    classification: z.literal("failedToInjectSession"),
    error: z.string(),
});
const RuntimePlaywrightErrorSchema = FailedToInjectSchema.extend({
    type: z.literal("error"),
    classification: z.literal("runtimePlaywrightError"),
    // Unix time in milliseconds
    startRuntimeExecutionTime: z.number(),
    // Unix time in milliseconds
    endRuntimeExecutionTime: z.number(),
});
const OtherErrorSchema = FailedToInjectSchema.extend({
    type: z.literal("error"),
    classification: z.literal("other"),
    // Unix time in seconds
    startRuntimeExecutionTime: z.number().optional(),
    // Unix time in seconds
    endRuntimeExecutionTime: z.number().optional(),
});
const RuntimeResultSchema = z.union([
    SuccessRuntimeResultSchema,
    FailedToInjectSchema,
    RuntimePlaywrightErrorSchema,
    OtherErrorSchema,
]);
const UserMetadataSchema = z.object({
    anonSessionId: z.string(),
    anonUserId: z.string(),
    externalUserId: z.string(),
    orgId: z.string(),
    orgName: z.string(),
    sdkClientId: z.string(),
    sdkClientName: z.string(),
    sessionCollectionTime: z.date().optional(),
});
const makeRuntimeLogSchema = (userMetadataSchema, browserConfigSchema) => z.object({
    environment: AnonEnvironmentSchema,
    userMetadata: userMetadataSchema,
    browserConfig: browserConfigSchema,
    app: z.string(),
    runtimeResult: RuntimeResultSchema,
});
const BrowserConfigSchema = z.discriminatedUnion("browserType", [
    ManagedBrowserConfigSchema,
    LocalBrowserConfigSchema,
    RemoteBrowserConfigSchema,
]);
const CreateUserMetadataSchema = z.object({
    anonSessionId: z.string(),
    externalUserId: z.string(),
});
const RuntimeLogSchema = makeRuntimeLogSchema(UserMetadataSchema, BrowserConfigSchema);
const BrowserConfigCreateRequestSchema = z.discriminatedUnion("browserType", [
    ManagedBrowserConfigSchema,
    LocalBrowserConfigSchema,
    RemoteBrowserConfigSchema,
    InferredRuntimeBrowserConfigSchema,
]);
/**
 * Schema to create a new runtime logs record. There are subtle difference in this creation payload over the
 * RuntimeLogSchema. Namely, it's meant to make creation easier and infer data for the RuntimeLog on th server side
 */
export const RuntimeLogCreateRequestSchema = makeRuntimeLogSchema(CreateUserMetadataSchema, BrowserConfigCreateRequestSchema);
export { AnonEnvironmentSchema, LocalBrowserConfigSchema, ManagedBrowserConfigSchema, RemoteBrowserConfigSchema, RuntimeResultSchema, UserMetadataSchema, RuntimeLogSchema, };
