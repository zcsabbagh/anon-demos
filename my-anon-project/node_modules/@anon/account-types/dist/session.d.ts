import { z } from "zod";
import { AppIntegrationConfig } from "./appIntegrationConfig.js";
import { RuntimeEnvironment } from "./runtimeEnvironment.js";
import { TypedResponse } from "./typedResponse.js";
export declare const SameSitePolicySchema: z.ZodEnum<["unspecified", "no_restriction", "Lax", "lax", "Strict", "strict", "None", "none"]>;
export declare const CookieSchema: z.ZodObject<{
    name: z.ZodString;
    value: z.ZodString;
    domain: z.ZodString;
    path: z.ZodString;
    expires: z.ZodOptional<z.ZodNumber>;
    secure: z.ZodBoolean;
    hostOnly: z.ZodOptional<z.ZodBoolean>;
    httpOnly: z.ZodOptional<z.ZodBoolean>;
    discard: z.ZodOptional<z.ZodBoolean>;
    session: z.ZodOptional<z.ZodBoolean>;
    partitioned: z.ZodOptional<z.ZodBoolean>;
    sameSite: z.ZodOptional<z.ZodEnum<["unspecified", "no_restriction", "Lax", "lax", "Strict", "strict", "None", "none"]>>;
    sameSitePolicy: z.ZodOptional<z.ZodEnum<["unspecified", "no_restriction", "Lax", "lax", "Strict", "strict", "None", "none"]>>;
    storeId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    name: string;
    value: string;
    path: string;
    domain: string;
    secure: boolean;
    expires?: number | undefined;
    hostOnly?: boolean | undefined;
    httpOnly?: boolean | undefined;
    discard?: boolean | undefined;
    session?: boolean | undefined;
    partitioned?: boolean | undefined;
    sameSite?: "unspecified" | "none" | "strict" | "no_restriction" | "Lax" | "lax" | "Strict" | "None" | undefined;
    sameSitePolicy?: "unspecified" | "none" | "strict" | "no_restriction" | "Lax" | "lax" | "Strict" | "None" | undefined;
    storeId?: string | undefined;
}, {
    name: string;
    value: string;
    path: string;
    domain: string;
    secure: boolean;
    expires?: number | undefined;
    hostOnly?: boolean | undefined;
    httpOnly?: boolean | undefined;
    discard?: boolean | undefined;
    session?: boolean | undefined;
    partitioned?: boolean | undefined;
    sameSite?: "unspecified" | "none" | "strict" | "no_restriction" | "Lax" | "lax" | "Strict" | "None" | undefined;
    sameSitePolicy?: "unspecified" | "none" | "strict" | "no_restriction" | "Lax" | "lax" | "Strict" | "None" | undefined;
    storeId?: string | undefined;
}>;
export declare const BrowserStorageSchema: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
export declare const SessionIdSchema: z.ZodString;
export declare const SessionStatusSchema: z.ZodEnum<["active", "revoked", "unknown"]>;
export declare const SessionSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    status: z.ZodOptional<z.ZodEnum<["active", "revoked", "unknown"]>>;
    cookies: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        value: z.ZodString;
        domain: z.ZodString;
        path: z.ZodString;
        expires: z.ZodOptional<z.ZodNumber>;
        secure: z.ZodBoolean;
        hostOnly: z.ZodOptional<z.ZodBoolean>;
        httpOnly: z.ZodOptional<z.ZodBoolean>;
        discard: z.ZodOptional<z.ZodBoolean>;
        session: z.ZodOptional<z.ZodBoolean>;
        partitioned: z.ZodOptional<z.ZodBoolean>;
        sameSite: z.ZodOptional<z.ZodEnum<["unspecified", "no_restriction", "Lax", "lax", "Strict", "strict", "None", "none"]>>;
        sameSitePolicy: z.ZodOptional<z.ZodEnum<["unspecified", "no_restriction", "Lax", "lax", "Strict", "strict", "None", "none"]>>;
        storeId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        value: string;
        path: string;
        domain: string;
        secure: boolean;
        expires?: number | undefined;
        hostOnly?: boolean | undefined;
        httpOnly?: boolean | undefined;
        discard?: boolean | undefined;
        session?: boolean | undefined;
        partitioned?: boolean | undefined;
        sameSite?: "unspecified" | "none" | "strict" | "no_restriction" | "Lax" | "lax" | "Strict" | "None" | undefined;
        sameSitePolicy?: "unspecified" | "none" | "strict" | "no_restriction" | "Lax" | "lax" | "Strict" | "None" | undefined;
        storeId?: string | undefined;
    }, {
        name: string;
        value: string;
        path: string;
        domain: string;
        secure: boolean;
        expires?: number | undefined;
        hostOnly?: boolean | undefined;
        httpOnly?: boolean | undefined;
        discard?: boolean | undefined;
        session?: boolean | undefined;
        partitioned?: boolean | undefined;
        sameSite?: "unspecified" | "none" | "strict" | "no_restriction" | "Lax" | "lax" | "Strict" | "None" | undefined;
        sameSitePolicy?: "unspecified" | "none" | "strict" | "no_restriction" | "Lax" | "lax" | "Strict" | "None" | undefined;
        storeId?: string | undefined;
    }>, "many">;
    localStorage: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
    sessionStorage: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
    proxyId: z.ZodOptional<z.ZodString>;
    url: z.ZodString;
}, "strip", z.ZodTypeAny, {
    url: string;
    localStorage: string[][];
    sessionStorage: string[][];
    cookies: {
        name: string;
        value: string;
        path: string;
        domain: string;
        secure: boolean;
        expires?: number | undefined;
        hostOnly?: boolean | undefined;
        httpOnly?: boolean | undefined;
        discard?: boolean | undefined;
        session?: boolean | undefined;
        partitioned?: boolean | undefined;
        sameSite?: "unspecified" | "none" | "strict" | "no_restriction" | "Lax" | "lax" | "Strict" | "None" | undefined;
        sameSitePolicy?: "unspecified" | "none" | "strict" | "no_restriction" | "Lax" | "lax" | "Strict" | "None" | undefined;
        storeId?: string | undefined;
    }[];
    id?: string | undefined;
    status?: "active" | "unknown" | "revoked" | undefined;
    proxyId?: string | undefined;
}, {
    url: string;
    localStorage: string[][];
    sessionStorage: string[][];
    cookies: {
        name: string;
        value: string;
        path: string;
        domain: string;
        secure: boolean;
        expires?: number | undefined;
        hostOnly?: boolean | undefined;
        httpOnly?: boolean | undefined;
        discard?: boolean | undefined;
        session?: boolean | undefined;
        partitioned?: boolean | undefined;
        sameSite?: "unspecified" | "none" | "strict" | "no_restriction" | "Lax" | "lax" | "Strict" | "None" | undefined;
        sameSitePolicy?: "unspecified" | "none" | "strict" | "no_restriction" | "Lax" | "lax" | "Strict" | "None" | undefined;
        storeId?: string | undefined;
    }[];
    id?: string | undefined;
    status?: "active" | "unknown" | "revoked" | undefined;
    proxyId?: string | undefined;
}>;
export declare const SessionAccessGrantSchema: z.ZodObject<{
    id: z.ZodString;
    role: z.ZodEnum<["admin", "reader", "writer"]>;
    sessionId: z.ZodString;
    subjectId: z.ZodString;
    subjectKind: z.ZodEnum<["sdkClientKind", "user"]>;
}, "strip", z.ZodTypeAny, {
    id: string;
    role: "admin" | "reader" | "writer";
    sessionId: string;
    subjectId: string;
    subjectKind: "user" | "sdkClientKind";
}, {
    id: string;
    role: "admin" | "reader" | "writer";
    sessionId: string;
    subjectId: string;
    subjectKind: "user" | "sdkClientKind";
}>;
export declare const SessionDataSchema: z.ZodObject<{
    ownerId: z.ZodOptional<z.ZodString>;
    domain: z.ZodString;
    session: z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        status: z.ZodOptional<z.ZodEnum<["active", "revoked", "unknown"]>>;
        cookies: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodString;
            domain: z.ZodString;
            path: z.ZodString;
            expires: z.ZodOptional<z.ZodNumber>;
            secure: z.ZodBoolean;
            hostOnly: z.ZodOptional<z.ZodBoolean>;
            httpOnly: z.ZodOptional<z.ZodBoolean>;
            discard: z.ZodOptional<z.ZodBoolean>;
            session: z.ZodOptional<z.ZodBoolean>;
            partitioned: z.ZodOptional<z.ZodBoolean>;
            sameSite: z.ZodOptional<z.ZodEnum<["unspecified", "no_restriction", "Lax", "lax", "Strict", "strict", "None", "none"]>>;
            sameSitePolicy: z.ZodOptional<z.ZodEnum<["unspecified", "no_restriction", "Lax", "lax", "Strict", "strict", "None", "none"]>>;
            storeId: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            value: string;
            path: string;
            domain: string;
            secure: boolean;
            expires?: number | undefined;
            hostOnly?: boolean | undefined;
            httpOnly?: boolean | undefined;
            discard?: boolean | undefined;
            session?: boolean | undefined;
            partitioned?: boolean | undefined;
            sameSite?: "unspecified" | "none" | "strict" | "no_restriction" | "Lax" | "lax" | "Strict" | "None" | undefined;
            sameSitePolicy?: "unspecified" | "none" | "strict" | "no_restriction" | "Lax" | "lax" | "Strict" | "None" | undefined;
            storeId?: string | undefined;
        }, {
            name: string;
            value: string;
            path: string;
            domain: string;
            secure: boolean;
            expires?: number | undefined;
            hostOnly?: boolean | undefined;
            httpOnly?: boolean | undefined;
            discard?: boolean | undefined;
            session?: boolean | undefined;
            partitioned?: boolean | undefined;
            sameSite?: "unspecified" | "none" | "strict" | "no_restriction" | "Lax" | "lax" | "Strict" | "None" | undefined;
            sameSitePolicy?: "unspecified" | "none" | "strict" | "no_restriction" | "Lax" | "lax" | "Strict" | "None" | undefined;
            storeId?: string | undefined;
        }>, "many">;
        localStorage: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
        sessionStorage: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
        proxyId: z.ZodOptional<z.ZodString>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        localStorage: string[][];
        sessionStorage: string[][];
        cookies: {
            name: string;
            value: string;
            path: string;
            domain: string;
            secure: boolean;
            expires?: number | undefined;
            hostOnly?: boolean | undefined;
            httpOnly?: boolean | undefined;
            discard?: boolean | undefined;
            session?: boolean | undefined;
            partitioned?: boolean | undefined;
            sameSite?: "unspecified" | "none" | "strict" | "no_restriction" | "Lax" | "lax" | "Strict" | "None" | undefined;
            sameSitePolicy?: "unspecified" | "none" | "strict" | "no_restriction" | "Lax" | "lax" | "Strict" | "None" | undefined;
            storeId?: string | undefined;
        }[];
        id?: string | undefined;
        status?: "active" | "unknown" | "revoked" | undefined;
        proxyId?: string | undefined;
    }, {
        url: string;
        localStorage: string[][];
        sessionStorage: string[][];
        cookies: {
            name: string;
            value: string;
            path: string;
            domain: string;
            secure: boolean;
            expires?: number | undefined;
            hostOnly?: boolean | undefined;
            httpOnly?: boolean | undefined;
            discard?: boolean | undefined;
            session?: boolean | undefined;
            partitioned?: boolean | undefined;
            sameSite?: "unspecified" | "none" | "strict" | "no_restriction" | "Lax" | "lax" | "Strict" | "None" | undefined;
            sameSitePolicy?: "unspecified" | "none" | "strict" | "no_restriction" | "Lax" | "lax" | "Strict" | "None" | undefined;
            storeId?: string | undefined;
        }[];
        id?: string | undefined;
        status?: "active" | "unknown" | "revoked" | undefined;
        proxyId?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    session: {
        url: string;
        localStorage: string[][];
        sessionStorage: string[][];
        cookies: {
            name: string;
            value: string;
            path: string;
            domain: string;
            secure: boolean;
            expires?: number | undefined;
            hostOnly?: boolean | undefined;
            httpOnly?: boolean | undefined;
            discard?: boolean | undefined;
            session?: boolean | undefined;
            partitioned?: boolean | undefined;
            sameSite?: "unspecified" | "none" | "strict" | "no_restriction" | "Lax" | "lax" | "Strict" | "None" | undefined;
            sameSitePolicy?: "unspecified" | "none" | "strict" | "no_restriction" | "Lax" | "lax" | "Strict" | "None" | undefined;
            storeId?: string | undefined;
        }[];
        id?: string | undefined;
        status?: "active" | "unknown" | "revoked" | undefined;
        proxyId?: string | undefined;
    };
    domain: string;
    ownerId?: string | undefined;
}, {
    session: {
        url: string;
        localStorage: string[][];
        sessionStorage: string[][];
        cookies: {
            name: string;
            value: string;
            path: string;
            domain: string;
            secure: boolean;
            expires?: number | undefined;
            hostOnly?: boolean | undefined;
            httpOnly?: boolean | undefined;
            discard?: boolean | undefined;
            session?: boolean | undefined;
            partitioned?: boolean | undefined;
            sameSite?: "unspecified" | "none" | "strict" | "no_restriction" | "Lax" | "lax" | "Strict" | "None" | undefined;
            sameSitePolicy?: "unspecified" | "none" | "strict" | "no_restriction" | "Lax" | "lax" | "Strict" | "None" | undefined;
            storeId?: string | undefined;
        }[];
        id?: string | undefined;
        status?: "active" | "unknown" | "revoked" | undefined;
        proxyId?: string | undefined;
    };
    domain: string;
    ownerId?: string | undefined;
}>;
export declare const SessionRequestSchema: z.ZodObject<{
    app: z.ZodString;
    authUrl: z.ZodString;
    completionIndicators: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        key: z.ZodString;
        storage: z.ZodEnum<["local", "session"]>;
    }, "strip", z.ZodTypeAny, {
        key: string;
        storage: "session" | "local";
    }, {
        key: string;
        storage: "session" | "local";
    }>, z.ZodObject<{
        key: z.ZodString;
        storage: z.ZodLiteral<"cookie">;
        domains: z.ZodArray<z.ZodString, "many">;
        validator: z.ZodOptional<z.ZodObject<{
            kind: z.ZodLiteral<"jwt_claim">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
            kind: "jwt_claim";
        }, {
            value: string;
            kind: "jwt_claim";
        }>>;
    }, "strip", z.ZodTypeAny, {
        key: string;
        storage: "cookie";
        domains: string[];
        validator?: {
            value: string;
            kind: "jwt_claim";
        } | undefined;
    }, {
        key: string;
        storage: "cookie";
        domains: string[];
        validator?: {
            value: string;
            kind: "jwt_claim";
        } | undefined;
    }>]>, "many">;
}, "strip", z.ZodTypeAny, {
    completionIndicators: ({
        key: string;
        storage: "session" | "local";
    } | {
        key: string;
        storage: "cookie";
        domains: string[];
        validator?: {
            value: string;
            kind: "jwt_claim";
        } | undefined;
    })[];
    app: string;
    authUrl: string;
}, {
    completionIndicators: ({
        key: string;
        storage: "session" | "local";
    } | {
        key: string;
        storage: "cookie";
        domains: string[];
        validator?: {
            value: string;
            kind: "jwt_claim";
        } | undefined;
    })[];
    app: string;
    authUrl: string;
}>;
export declare const SessionAppUserSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    anonId: z.ZodString;
    email: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    anonId: string;
    id?: string | undefined;
    email?: string | undefined;
}, {
    anonId: string;
    id?: string | undefined;
    email?: string | undefined;
}>;
export declare const SessionMetadataSchema: z.ZodObject<{
    app: z.ZodString;
    sessionId: z.ZodString;
    appUser: z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        anonId: z.ZodString;
        email: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        anonId: string;
        id?: string | undefined;
        email?: string | undefined;
    }, {
        anonId: string;
        id?: string | undefined;
        email?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    sessionId: string;
    app: string;
    appUser: {
        anonId: string;
        id?: string | undefined;
        email?: string | undefined;
    };
}, {
    sessionId: string;
    app: string;
    appUser: {
        anonId: string;
        id?: string | undefined;
        email?: string | undefined;
    };
}>;
export declare const SessionListResponseSchema: z.ZodObject<{
    sessions: z.ZodArray<z.ZodObject<{
        app: z.ZodString;
        sessionId: z.ZodString;
        appUser: z.ZodObject<{
            id: z.ZodOptional<z.ZodString>;
            anonId: z.ZodString;
            email: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            anonId: string;
            id?: string | undefined;
            email?: string | undefined;
        }, {
            anonId: string;
            id?: string | undefined;
            email?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        sessionId: string;
        app: string;
        appUser: {
            anonId: string;
            id?: string | undefined;
            email?: string | undefined;
        };
    }, {
        sessionId: string;
        app: string;
        appUser: {
            anonId: string;
            id?: string | undefined;
            email?: string | undefined;
        };
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    sessions: {
        sessionId: string;
        app: string;
        appUser: {
            anonId: string;
            id?: string | undefined;
            email?: string | undefined;
        };
    }[];
}, {
    sessions: {
        sessionId: string;
        app: string;
        appUser: {
            anonId: string;
            id?: string | undefined;
            email?: string | undefined;
        };
    }[];
}>;
export declare const CreateSessionAccessGrantRequestSchema: z.ZodObject<{
    sessionId: z.ZodString;
    appUserId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    sessionId: string;
    appUserId: string;
}, {
    sessionId: string;
    appUserId: string;
}>;
export declare const DeleteSessionAccessGrantRequestSchema: z.ZodObject<{
    sessionId: z.ZodString;
    appUserId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    sessionId: string;
    appUserId: string;
}, {
    sessionId: string;
    appUserId: string;
}>;
export type SameSitePolicy = z.infer<typeof SameSitePolicySchema>;
export type Cookie = z.infer<typeof CookieSchema>;
export type SessionId = z.infer<typeof SessionIdSchema>;
export type SessionStatus = z.infer<typeof SessionStatusSchema>;
export type Session = z.infer<typeof SessionSchema>;
export type SessionAccessGrant = z.infer<typeof SessionAccessGrantSchema>;
export type SessionData = z.infer<typeof SessionDataSchema>;
export type SessionRequest = z.infer<typeof SessionRequestSchema>;
/**
 * Hono typed response format.
 */
export type KnownResponseFormat = "json" | "text";
export type ResponseFormat = KnownResponseFormat | string;
export type GetAppIntegrationResponse = Response & TypedResponse<{
    message: string;
} | {
    app: AppIntegrationConfig;
}>;
export type ListAppIntegrationsResponse = Response & TypedResponse<{
    apps: ((Pick<AppIntegrationConfig, "displayName" | "iconUrl" | "experimental"> & {
        domains: string[];
    }) | {
        id: string;
    })[];
}>;
export type CreateRuntimeBrowserEnvironmentResponse = Response & TypedResponse<{
    message: string;
} | RuntimeEnvironment>;
export type AddSessionResponse = (Response & TypedResponse<{
    message: string;
} | {
    message: string;
    ownerId: string;
    domain: string;
}>) | HandleGetSessionResponse;
export type UpdateSessionResponse = (Response & TypedResponse<{
    message: string;
} | {
    message: string;
    ownerId: string;
    domain: string;
}>) | HandleGetSessionResponse;
export type HandleSessionError = Response & TypedResponse<{
    message: string;
}>;
export type SessionResponse = Response & TypedResponse<{
    message: string;
} | {
    message: string;
    status: "pending";
    requestId: string;
}>;
export type HandleGetSessionResponse = Response & TypedResponse<{
    message: string;
} | {
    status?: string;
} | {
    ownerId?: string;
    domain?: string;
    session?: Session;
}>;
export type SessionRequestStatusResponse = Response & TypedResponse<{
    message: string;
    succeeded?: boolean;
    status?: string;
    details?: object;
}>;
export type ListSessionsResponse = (Response & TypedResponse<{
    message: string;
} | {
    sessions: SessionData[];
}>) | HandleGetSessionResponse;
export type RemoveSessionResponse = (Response & TypedResponse<{
    ownerId: string;
    domain: string;
}>) | HandleSessionError;
export type PingResponse = Response & TypedResponse<string>;
export type HealthzResponse = Response & TypedResponse<string>;
export type SessionMetadata = z.infer<typeof SessionMetadataSchema>;
export type SessionAppUser = z.infer<typeof SessionAppUserSchema>;
export type SessionListResponse = z.infer<typeof SessionListResponseSchema>;
export type CreateSessionAccessGrantRequest = z.infer<typeof CreateSessionAccessGrantRequestSchema>;
export type DeleteSessionAccessGrantRequest = z.infer<typeof DeleteSessionAccessGrantRequestSchema>;
