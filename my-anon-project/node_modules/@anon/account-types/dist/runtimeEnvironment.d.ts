import { z } from "zod";
export type RuntimeEnvironment = {
    id: string;
    ownerId: string;
    environment: {
        connectUrl: string;
        liveStreamingSession?: string;
        managedBrowserSessionId: string;
    };
};
export declare const LocalProxyConfigSchema: z.ZodObject<{
    /**
     * Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or
     * `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.
     */
    server: z.ZodString;
    /**
     * Optional comma-separated domains to bypass proxy, for example `".com, chromium.org, .domain.com"`.
     */
    bypass: z.ZodOptional<z.ZodString>;
    /**
     * Optional username to use if HTTP proxy requires authentication.
     */
    username: z.ZodOptional<z.ZodString>;
    /**
     * Optional password to use if HTTP proxy requires authentication.
     */
    password: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    server: string;
    bypass?: string | undefined;
    username?: string | undefined;
    password?: string | undefined;
}, {
    server: string;
    bypass?: string | undefined;
    username?: string | undefined;
    password?: string | undefined;
}>;
export type LocalProxyConfig = z.infer<typeof LocalProxyConfigSchema>;
export declare const CreateManagedAnonEnvironmentRequestSchema: z.ZodNullable<z.ZodObject<{
    proxy: z.ZodOptional<z.ZodObject<{
        /**
         * Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or
         * `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.
         */
        server: z.ZodString;
        /**
         * Optional comma-separated domains to bypass proxy, for example `".com, chromium.org, .domain.com"`.
         */
        bypass: z.ZodOptional<z.ZodString>;
        /**
         * Optional username to use if HTTP proxy requires authentication.
         */
        username: z.ZodOptional<z.ZodString>;
        /**
         * Optional password to use if HTTP proxy requires authentication.
         */
        password: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        server: string;
        bypass?: string | undefined;
        username?: string | undefined;
        password?: string | undefined;
    }, {
        server: string;
        bypass?: string | undefined;
        username?: string | undefined;
        password?: string | undefined;
    }>>;
    isLiveStreamingSession: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    proxy?: {
        server: string;
        bypass?: string | undefined;
        username?: string | undefined;
        password?: string | undefined;
    } | undefined;
    isLiveStreamingSession?: boolean | undefined;
}, {
    proxy?: {
        server: string;
        bypass?: string | undefined;
        username?: string | undefined;
        password?: string | undefined;
    } | undefined;
    isLiveStreamingSession?: boolean | undefined;
}>>;
export type CreateManagedAnonEnvironmentRequest = z.infer<typeof CreateManagedAnonEnvironmentRequestSchema>;
export type CreateManagedAnonEnvironmentResponse = {
    connectUrl: string;
    liveSessionUrl?: string;
    managedBrowserSessionId: string;
};
