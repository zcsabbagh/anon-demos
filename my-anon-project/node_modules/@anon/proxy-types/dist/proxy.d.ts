export type ProxyConfig = {
    cityName?: string;
    dedicated: boolean;
};
export type Proxy = {
    id: string;
    updatedAt: Date;
    lastUsed: Date;
    proxyClientId: string;
    username: string;
    password: string;
    host: string;
    port: number;
    countryCode: string;
    cityName: string;
    clientName: string;
    proxy_url: string;
    dedicated: boolean;
};
/**
 * A utility type to make some fields of a type optional.
 */
export type Optional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;
/**
 * This is proxy object that is not inserted yet into a database
 */
export type NewProxy = Optional<Optional<Optional<Proxy, "id">, "lastUsed">, "updatedAt">;
export type IpWithCoordinates = {
    ipAddress: string;
    latitude: number;
    longitude: number;
    cityName: string;
};
/**
 * A proxy client to create and get proxies.
 */
export declare abstract class ProxyClient {
    abstract createProxy(config: ProxyConfig): Promise<Proxy>;
    abstract getProxy(id: string): Promise<Proxy | undefined>;
    abstract getCities(): Promise<string[]>;
    abstract getName(): string;
    abstract getAllProxiesPerCity(): Promise<Map<string, NewProxy[]>>;
}
