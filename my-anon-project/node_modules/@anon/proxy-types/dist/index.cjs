'use strict';

/**
 * A proxy client to create and get proxies.
 */
class ProxyClient {
}

class ProxyTester {
    async isProxyAvailable(proxy, cityName) {
        try {
            const ipAddressWithCoords = await this.getCurrentIpAddress(proxy);
            return ipAddressWithCoords.cityName === cityName;
        }
        catch (e) {
            return false;
        }
    }
}

class InvalidGeocodingError extends Error {
    ipAddress;
    latitude;
    longitude;
    constructor(ipAddress, latitude, longitude) {
        super(`Invalid geocoding for IP Address ${ipAddress} with Latitude: ${latitude}, Longitude: ${longitude}`);
        this.ipAddress = ipAddress;
        this.latitude = latitude;
        this.longitude = longitude;
        // Set the prototype explicitly.
        Object.setPrototypeOf(this, InvalidGeocodingError.prototype);
        // Ensure the name is set to the name of the new error
        this.name = this.constructor.name;
    }
}
class InvalidArgumentError extends Error {
    inputValue;
    fieldName;
    functionName;
    constructor(inputValue, functionName, parameterName) {
        super(`Function (${functionName}) received invalid argument for ${parameterName}: ${inputValue}`);
        this.inputValue = inputValue;
        this.fieldName = parameterName;
        this.functionName = functionName;
        // Set the prototype explicitly.
        Object.setPrototypeOf(this, InvalidArgumentError.prototype);
        // Ensure the name is set to the name of the new error
        this.name = this.constructor.name;
    }
}
class RequestClientError extends Error {
    service;
    path;
    status;
    errorDescription;
    constructor(service, path, status, errorDescription) {
        super(`Made a client error to ${service} (${path})  with : ${status} ${errorDescription}`);
        this.service = service;
        this.path = path;
        this.status = status;
        this.errorDescription = errorDescription;
        // Set the prototype explicitly.
        Object.setPrototypeOf(this, RequestClientError.prototype);
        // Ensure the name is set to the name of the new error
        this.name = this.constructor.name;
    }
}
class RequestServerError extends Error {
    service;
    path;
    status;
    errorDescription;
    constructor(service, path, status, errorDescription) {
        super(`Made a server error to ${service} (${path})  with : ${status} ${errorDescription}`);
        this.service = service;
        this.path = path;
        this.status = status;
        this.errorDescription = errorDescription;
        // Set the prototype explicitly.
        Object.setPrototypeOf(this, RequestServerError.prototype);
    }
}
class UnavailableProxyError extends Error {
    constructor(city, country) {
        super(`No proxies available around ${city}, ${country}`);
        // Set the prototype explicitly.
        Object.setPrototypeOf(this, UnavailableProxyError.prototype);
        // Ensure the name is set to the name of the new error
        this.name = this.constructor.name;
    }
}

exports.InvalidArgumentError = InvalidArgumentError;
exports.InvalidGeocodingError = InvalidGeocodingError;
exports.ProxyClient = ProxyClient;
exports.ProxyTester = ProxyTester;
exports.RequestClientError = RequestClientError;
exports.RequestServerError = RequestServerError;
exports.UnavailableProxyError = UnavailableProxyError;
