export class InvalidGeocodingError extends Error {
  ipAddress: string;
  latitude: number;
  longitude: number;

  constructor(ipAddress: string, latitude: number, longitude: number) {
    super(
      `Invalid geocoding for IP Address ${ipAddress} with Latitude: ${latitude}, Longitude: ${longitude}`,
    );
    this.ipAddress = ipAddress;
    this.latitude = latitude;
    this.longitude = longitude;

    // Set the prototype explicitly.
    Object.setPrototypeOf(this, InvalidGeocodingError.prototype);

    // Ensure the name is set to the name of the new error
    this.name = this.constructor.name;
  }
}

export class InvalidArgumentError extends Error {
  public inputValue: any;
  public fieldName: string;
  public functionName: string;

  constructor(inputValue: any, functionName: string, parameterName: string) {
    super(
      `Function (${functionName}) received invalid argument for ${parameterName}: ${inputValue}`,
    );
    this.inputValue = inputValue;
    this.fieldName = parameterName;
    this.functionName = functionName;

    // Set the prototype explicitly.
    Object.setPrototypeOf(this, InvalidArgumentError.prototype);

    // Ensure the name is set to the name of the new error
    this.name = this.constructor.name;
  }
}

export class RequestClientError extends Error {
  service: string;
  path: string;
  status: number;
  errorDescription: string;

  constructor(
    service: string,
    path: string,
    status: number,
    errorDescription: string,
  ) {
    super(
      `Made a client error to ${service} (${path})  with : ${status} ${errorDescription}`,
    );
    this.service = service;
    this.path = path;
    this.status = status;
    this.errorDescription = errorDescription;

    // Set the prototype explicitly.
    Object.setPrototypeOf(this, RequestClientError.prototype);

    // Ensure the name is set to the name of the new error
    this.name = this.constructor.name;
  }
}

export class RequestServerError extends Error {
  service: string;
  path: string;
  status: number;
  errorDescription: string;

  constructor(
    service: string,
    path: string,
    status: number,
    errorDescription: string,
  ) {
    super(
      `Made a server error to ${service} (${path})  with : ${status} ${errorDescription}`,
    );
    this.service = service;
    this.path = path;
    this.status = status;
    this.errorDescription = errorDescription;

    // Set the prototype explicitly.

    Object.setPrototypeOf(this, RequestServerError.prototype);
  }
}

export class UnavailableProxyError extends Error {
  constructor(city: string, country: string) {
    super(`No proxies available around ${city}, ${country}`);
    // Set the prototype explicitly.
    Object.setPrototypeOf(this, UnavailableProxyError.prototype);

    // Ensure the name is set to the name of the new error
    this.name = this.constructor.name;
  }
}
