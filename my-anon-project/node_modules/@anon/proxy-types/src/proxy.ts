export type ProxyConfig = {
  cityName?: string;
  // This option enables to have a proxy that would always be invoked from the same IP address.
  dedicated: boolean;
};

export type Proxy = {
  id: string; // This is the id assigned by Anon's proxy service
  updatedAt: Date;
  lastUsed: Date;
  proxyClientId: string; // This is the id assigned by proxy client
  username: string;
  password: string;
  host: string;
  port: number;
  countryCode: string;
  cityName: string;
  clientName: string;
  proxy_url: string;
  dedicated: boolean;
};

/**
 * A utility type to make some fields of a type optional.
 */
export type Optional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;

/**
 * This is proxy object that is not inserted yet into a database
 */
export type NewProxy = Optional<
  Optional<Optional<Proxy, "id">, "lastUsed">,
  "updatedAt"
>;

export type IpWithCoordinates = {
  ipAddress: string;
  latitude: number;
  longitude: number;
  cityName: string;
};

/**
 * A proxy client to create and get proxies.
 */
export abstract class ProxyClient {
  abstract createProxy(config: ProxyConfig): Promise<Proxy>;
  abstract getProxy(id: string): Promise<Proxy | undefined>;
  // Gets the cities that are available for proxies
  abstract getCities(): Promise<string[]>;
  abstract getName(): string;
  abstract getAllProxiesPerCity(): Promise<Map<string, NewProxy[]>>;
}
