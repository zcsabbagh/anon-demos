import BrowserbaseAISDK from './integrations/ai-sdk.js';
import { BrowserbaseCodeGenerator, type GeneratorOptions, type ActionsEvent } from './recorder/recorder';
export type ClientOptions = {
    apiKey?: string;
    projectId?: string;
    baseURL?: string;
    baseConnectURL?: string;
};
export type ConnectOptions = {
    sessionId?: string;
    proxy?: boolean;
};
export type LoadOptions = {
    textContent?: boolean;
} & ConnectOptions;
export type ScreenshotOptions = {
    fullPage?: boolean;
} & ConnectOptions;
export type CreateSessionOptions = {
    projectId?: string;
    extensionId?: string;
    browserSettings?: {
        fingerprint?: {
            browserListQuery?: string;
            httpVersion?: 1 | 2;
            browsers?: Array<'chrome' | 'firefox' | 'edge' | 'safari'>;
            devices?: Array<'desktop' | 'mobile'>;
            locales?: string[];
            operatingSystems?: Array<'windows' | 'macos' | 'linux' | 'ios' | 'android'>;
            screen?: {
                maxHeight?: number;
                maxWidth?: number;
                minHeight?: number;
                minWidth?: number;
            };
        };
        viewport?: {
            width?: number;
            height?: number;
        };
        context?: {
            id: string;
            persist: boolean;
        };
        blockAds?: boolean;
        solveCaptchas?: boolean;
        recordSession?: boolean;
        logSession?: boolean;
    };
    keepAlive?: boolean;
    timeout?: number;
    proxies?: boolean | Array<{
        type: 'browserbase';
        geolocation?: {
            country: string;
            state?: string;
            city?: string;
        };
        domainPattern?: string;
    } | {
        type: 'external';
        server: string;
        domainPattern?: string;
        username?: string;
        password?: string;
    }>;
};
export type Session = {
    id: string;
    createdAt: string;
    startedAt: string;
    endedAt?: string;
    expiresAt: string;
    projectId: string;
    status: 'RUNNING' | 'COMPLETED' | 'ERROR' | 'TIMED_OUT';
    proxyBytes?: number;
    keepAlive: boolean;
    contextId?: string;
};
export type SessionRecording = {
    type?: number;
    time?: string;
    data?: any;
};
export type DebugConnectionURLs = {
    debuggerFullscreenUrl?: string;
    debuggerUrl?: string;
    wsUrl?: string;
    pages?: DebugConnectionPage;
};
export type DebugConnectionPage = {
    id: string;
    url: string;
    title: string;
    debuggerUrl: string;
    debuggerFullscreenUrl: string;
};
export type SessionLog = {
    sessionId?: string;
    id: string;
    timestamp?: string;
    method?: string;
    request?: {
        timestamp?: string;
        params?: any;
        rawBody?: string;
    };
    response?: {
        timestamp?: string;
        result?: any;
        rawBody?: string;
    };
    pageId?: string;
};
export default class Browserbase {
    private apiKey;
    private projectId;
    private baseAPIURL;
    private baseConnectURL;
    constructor(options?: ClientOptions);
    getConnectURL({ sessionId, proxy }?: ConnectOptions): string;
    listSessions(): Promise<Session[]>;
    createSession(options?: CreateSessionOptions): Promise<Session>;
    completeSession(sessionId: string): Promise<Session>;
    getSession(sessionId: string): Promise<Session>;
    getSessionRecording(sessionId: string): Promise<SessionRecording[]>;
    getSessionDownloads(sessionId: string, retryInterval?: number, retryCount?: number): Promise<Buffer>;
    getDebugConnectionURLs(sessionId: string): Promise<DebugConnectionURLs>;
    getSessionLogs(sessionId: string): Promise<SessionLog[]>;
    load(url: string | string[], options?: LoadOptions): Promise<string> | AsyncGenerator<string, any, unknown>;
    loadURL(url: string, options?: LoadOptions): Promise<string>;
    loadURLs(urls: string[], options?: LoadOptions): AsyncGenerator<string>;
    screenshot(url: string, options?: ScreenshotOptions): Promise<Buffer>;
    createContext(): Promise<{
        id: string;
    }>;
}
export { Browserbase, BrowserbaseAISDK, BrowserbaseCodeGenerator, type GeneratorOptions, type ActionsEvent, };
