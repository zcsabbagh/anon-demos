import { EventEmitter } from 'events';
import type { BrowserContextOptions, LaunchOptions, Frame } from 'playwright-core';
import type { LanguageGenerator } from './language';
import type { Action, Signal, FrameDescription } from './recorder-types';
export type ActionInContext = {
    frame: FrameDescription;
    action: Action;
    committed?: boolean;
};
export declare class CodeGenerator extends EventEmitter {
    private _currentAction;
    private _lastAction;
    private _actions;
    private _enabled;
    private _options;
    constructor(browserName: string, enabled: boolean, launchOptions: LaunchOptions, contextOptions: BrowserContextOptions, deviceName: string | undefined, saveStorage: string | undefined);
    restart(): void;
    setEnabled(enabled: boolean): void;
    addAction(action: ActionInContext): void;
    willPerformAction(action: ActionInContext): void;
    performedActionFailed(action: ActionInContext): void;
    didPerformAction(actionInContext: ActionInContext): void;
    commitLastAction(): void;
    signal(pageAlias: string, frame: Frame, signal: Signal): void;
    generateStructure(languageGenerator: LanguageGenerator): {
        header: string;
        footer: string;
        actions: string[];
        text: string;
    };
}
