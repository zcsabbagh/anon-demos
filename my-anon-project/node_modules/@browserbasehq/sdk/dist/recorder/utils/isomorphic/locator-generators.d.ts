/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
export type Language = 'javascript' | 'python' | 'java' | 'csharp' | 'jsonl';
export type LocatorType = 'default' | 'role' | 'text' | 'label' | 'placeholder' | 'alt' | 'title' | 'test-id' | 'nth' | 'first' | 'last' | 'has-text' | 'has-not-text' | 'has' | 'hasNot' | 'frame' | 'and' | 'or' | 'chain';
export type LocatorBase = 'page' | 'locator' | 'frame-locator';
export type Quote = "'" | '"' | '`';
type LocatorOptions = {
    attrs?: {
        name: string;
        value: string | boolean | number;
    }[];
    exact?: boolean;
    name?: string | RegExp;
    hasText?: string | RegExp;
    hasNotText?: string | RegExp;
};
export interface LocatorFactory {
    generateLocator(base: LocatorBase, kind: LocatorType, body: string | RegExp, options?: LocatorOptions): string;
    chainLocators(locators: string[]): string;
}
export declare function asLocator(lang: Language, selector: string, isFrameLocator?: boolean): string;
export declare function asLocators(lang: Language, selector: string, isFrameLocator?: boolean, maxOutputSize?: number, preferredQuote?: Quote): string[];
export declare class JavaScriptLocatorFactory implements LocatorFactory {
    private preferredQuote?;
    constructor(preferredQuote?: Quote);
    generateLocator(base: LocatorBase, kind: LocatorType, body: string | RegExp, options?: LocatorOptions): string;
    chainLocators(locators: string[]): string;
    private regexToSourceString;
    private toCallWithExact;
    private toHasText;
    private toTestIdValue;
    private quote;
}
export declare class PythonLocatorFactory implements LocatorFactory {
    generateLocator(base: LocatorBase, kind: LocatorType, body: string | RegExp, options?: LocatorOptions): string;
    chainLocators(locators: string[]): string;
    private regexToString;
    private toCallWithExact;
    private toHasText;
    private toTestIdValue;
    private quote;
}
export declare class JavaLocatorFactory implements LocatorFactory {
    generateLocator(base: LocatorBase, kind: LocatorType, body: string | RegExp, options?: LocatorOptions): string;
    chainLocators(locators: string[]): string;
    private regexToString;
    private toCallWithExact;
    private toHasText;
    private toTestIdValue;
    private quote;
}
export declare class CSharpLocatorFactory implements LocatorFactory {
    generateLocator(base: LocatorBase, kind: LocatorType, body: string | RegExp, options?: LocatorOptions): string;
    chainLocators(locators: string[]): string;
    private regexToString;
    private toCallWithExact;
    private toHasText;
    private toTestIdValue;
    private toHasNotText;
    private quote;
}
export declare class JsonlLocatorFactory implements LocatorFactory {
    generateLocator(base: LocatorBase, kind: LocatorType, body: string | RegExp, options?: LocatorOptions): string;
    chainLocators(locators: string[]): string;
}
export {};
